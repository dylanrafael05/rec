//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from source/Antlr/Rec.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="RecParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IRecVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] RecParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.topLevelStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTopLevelStatement([NotNull] RecParser.TopLevelStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.asStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAsStatement([NotNull] RecParser.AsStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.simpleScopedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimpleScopedIdentifier([NotNull] RecParser.SimpleScopedIdentifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.modStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModStatement([NotNull] RecParser.ModStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.useStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUseStatement([NotNull] RecParser.UseStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.templateHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTemplateHeader([NotNull] RecParser.TemplateHeaderContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.structFieldDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStructFieldDefine([NotNull] RecParser.StructFieldDefineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.structDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStructDefine([NotNull] RecParser.StructDefineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.fnArgumentDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFnArgumentDefine([NotNull] RecParser.FnArgumentDefineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.fnDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFnDefine([NotNull] RecParser.FnDefineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.aliasDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAliasDefine([NotNull] RecParser.AliasDefineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] RecParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] RecParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitContinueStatement([NotNull] RecParser.ContinueStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakStatement([NotNull] RecParser.BreakStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] RecParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.deferStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeferStatement([NotNull] RecParser.DeferStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] RecParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ElseStatement</c>
	/// labeled alternative in <see cref="RecParser.ifTail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseStatement([NotNull] RecParser.ElseStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ElifStatement</c>
	/// labeled alternative in <see cref="RecParser.ifTail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElifStatement([NotNull] RecParser.ElifStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] RecParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.assignStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignStatement([NotNull] RecParser.AssignStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.letStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLetStatement([NotNull] RecParser.LetStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.typenameFnArgs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypenameFnArgs([NotNull] RecParser.TypenameFnArgsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TypenameSingle</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypenameSingle([NotNull] RecParser.TypenameSingleContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TypenameWrapped</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypenameWrapped([NotNull] RecParser.TypenameWrappedContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TypenameGeneric</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypenameGeneric([NotNull] RecParser.TypenameGenericContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TypenamePointer</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypenamePointer([NotNull] RecParser.TypenamePointerContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TypenameArray</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypenameArray([NotNull] RecParser.TypenameArrayContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TypenameFn</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypenameFn([NotNull] RecParser.TypenameFnContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AndOperator</c>
	/// labeled alternative in <see cref="RecParser.logicalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAndOperator([NotNull] RecParser.AndOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>OrOperator</c>
	/// labeled alternative in <see cref="RecParser.logicalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrOperator([NotNull] RecParser.OrOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>EqualsOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualsOperator([NotNull] RecParser.EqualsOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NotEqualsOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotEqualsOperator([NotNull] RecParser.NotEqualsOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>GreaterThanOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterThanOperator([NotNull] RecParser.GreaterThanOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LessThanOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessThanOperator([NotNull] RecParser.LessThanOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>GreaterEqualOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGreaterEqualOperator([NotNull] RecParser.GreaterEqualOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LessEqualOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLessEqualOperator([NotNull] RecParser.LessEqualOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MulOperator</c>
	/// labeled alternative in <see cref="RecParser.muldivOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulOperator([NotNull] RecParser.MulOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DivOperator</c>
	/// labeled alternative in <see cref="RecParser.muldivOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDivOperator([NotNull] RecParser.DivOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitAndOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitAndOperator([NotNull] RecParser.BitAndOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitOrOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitOrOperator([NotNull] RecParser.BitOrOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitXorOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitXorOperator([NotNull] RecParser.BitXorOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitShiftLeftOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitShiftLeftOperator([NotNull] RecParser.BitShiftLeftOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitShiftRightOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitShiftRightOperator([NotNull] RecParser.BitShiftRightOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AddOperator</c>
	/// labeled alternative in <see cref="RecParser.addsubOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddOperator([NotNull] RecParser.AddOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>SubOperator</c>
	/// labeled alternative in <see cref="RecParser.addsubOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubOperator([NotNull] RecParser.SubOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PositOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPositOperator([NotNull] RecParser.PositOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NegateOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNegateOperator([NotNull] RecParser.NegateOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitNotOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitNotOperator([NotNull] RecParser.BitNotOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DereferenceOperator</c>
	/// labeled alternative in <see cref="RecParser.memoryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDereferenceOperator([NotNull] RecParser.DereferenceOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AddressofOperator</c>
	/// labeled alternative in <see cref="RecParser.memoryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddressofOperator([NotNull] RecParser.AddressofOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DotExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDotExpression([NotNull] RecParser.DotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TermExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTermExpression([NotNull] RecParser.TermExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BinaryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryExpression([NotNull] RecParser.BinaryExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MemoryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemoryExpression([NotNull] RecParser.MemoryExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnaryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryExpression([NotNull] RecParser.UnaryExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCastExpression([NotNull] RecParser.CastExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CallExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCallExpression([NotNull] RecParser.CallExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.templateInstantiation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTemplateInstantiation([NotNull] RecParser.TemplateInstantiationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.structExprAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStructExprAssign([NotNull] RecParser.StructExprAssignContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.structExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStructExpression([NotNull] RecParser.StructExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.dotComponent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDotComponent([NotNull] RecParser.DotComponentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.variableReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableReference([NotNull] RecParser.VariableReferenceContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RecParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTerm([NotNull] RecParser.TermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntegerLiteral([NotNull] RecParser.IntegerLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FloatLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFloatLiteral([NotNull] RecParser.FloatLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringLiteral([NotNull] RecParser.StringLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BoolLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBoolLiteral([NotNull] RecParser.BoolLiteralContext context);
}
