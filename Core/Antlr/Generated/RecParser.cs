//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from source/Antlr/Rec.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class RecParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, Whitespace=13, SLComment=14, MLComment=15, 
		Var=16, Let=17, End=18, If=19, Else=20, While=21, Fn=22, Continue=23, 
		Break=24, Defer=25, Type=26, Struct=27, Template=28, New=29, Return=30, 
		For=31, Mod=32, Use=33, Auto=34, And=35, Not=36, Or=37, True=38, False=39, 
		Uninit=40, As=41, Cast=42, Identifier=43, Integer=44, Float=45, String=46, 
		Plus=47, Minus=48, Star=49, Slash=50, Ampersand=51, Equal=52, CompEqual=53, 
		OpenParen=54, CloseParen=55, OpenBrace=56, CloseBrace=57, OpenIndex=58, 
		CloseIndex=59;
	public const int
		RULE_program = 0, RULE_topLevelStatement = 1, RULE_asStatement = 2, RULE_simpleScopedIdentifier = 3, 
		RULE_modStatement = 4, RULE_useStatement = 5, RULE_templateHeader = 6, 
		RULE_structFieldDefine = 7, RULE_structDefine = 8, RULE_fnArgumentDefine = 9, 
		RULE_fnDefine = 10, RULE_aliasDefine = 11, RULE_statement = 12, RULE_block = 13, 
		RULE_continueStatement = 14, RULE_breakStatement = 15, RULE_returnStatement = 16, 
		RULE_deferStatement = 17, RULE_ifStatement = 18, RULE_ifTail = 19, RULE_whileStatement = 20, 
		RULE_assignStatement = 21, RULE_letStatement = 22, RULE_typenameFnArgs = 23, 
		RULE_typename = 24, RULE_logicalOperator = 25, RULE_compOperator = 26, 
		RULE_muldivOperator = 27, RULE_bitwiseOperator = 28, RULE_addsubOperator = 29, 
		RULE_unaryOperator = 30, RULE_memoryOperator = 31, RULE_expression = 32, 
		RULE_templateInstantiation = 33, RULE_structExprAssign = 34, RULE_structExpression = 35, 
		RULE_dotComponent = 36, RULE_variableReference = 37, RULE_term = 38, RULE_literal = 39;
	public static readonly string[] ruleNames = {
		"program", "topLevelStatement", "asStatement", "simpleScopedIdentifier", 
		"modStatement", "useStatement", "templateHeader", "structFieldDefine", 
		"structDefine", "fnArgumentDefine", "fnDefine", "aliasDefine", "statement", 
		"block", "continueStatement", "breakStatement", "returnStatement", "deferStatement", 
		"ifStatement", "ifTail", "whileStatement", "assignStatement", "letStatement", 
		"typenameFnArgs", "typename", "logicalOperator", "compOperator", "muldivOperator", 
		"bitwiseOperator", "addsubOperator", "unaryOperator", "memoryOperator", 
		"expression", "templateInstantiation", "structExprAssign", "structExpression", 
		"dotComponent", "variableReference", "term", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','", "';'", "'!='", "'>'", "'<'", "'<='", "'>='", "'|'", 
		"'^'", "'~'", "'''", null, null, null, "'var'", "'let'", "'end'", "'if'", 
		"'else'", "'while'", "'fn'", "'continue'", "'break'", "'defer'", "'type'", 
		"'struct'", "'template'", "'new'", "'return'", "'for'", "'mod'", "'use'", 
		"'auto'", "'and'", "'not'", "'or'", "'true'", "'false'", "'uninit'", "'as'", 
		"'cast'", null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'&'", "'='", 
		"'=='", "'('", "')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "Whitespace", "SLComment", "MLComment", "Var", "Let", "End", "If", 
		"Else", "While", "Fn", "Continue", "Break", "Defer", "Type", "Struct", 
		"Template", "New", "Return", "For", "Mod", "Use", "Auto", "And", "Not", 
		"Or", "True", "False", "Uninit", "As", "Cast", "Identifier", "Integer", 
		"Float", "String", "Plus", "Minus", "Star", "Slash", "Ampersand", "Equal", 
		"CompEqual", "OpenParen", "CloseParen", "OpenBrace", "CloseBrace", "OpenIndex", 
		"CloseIndex"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rec.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RecParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RecParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RecParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RecParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2212382310400L) != 0)) {
				{
				{
				State = 80;
				topLevelStatement();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FnDefineContext fnDefine() {
			return GetRuleContext<FnDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefineContext structDefine() {
			return GetRuleContext<StructDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasDefineContext aliasDefine() {
			return GetRuleContext<AliasDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetStatementContext letStatement() {
			return GetRuleContext<LetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModStatementContext modStatement() {
			return GetRuleContext<ModStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsStatementContext asStatement() {
			return GetRuleContext<AsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseStatementContext useStatement() {
			return GetRuleContext<UseStatementContext>(0);
		}
		public TopLevelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterTopLevelStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitTopLevelStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelStatementContext topLevelStatement() {
		TopLevelStatementContext _localctx = new TopLevelStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelStatement);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				fnDefine();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				structDefine();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 90;
				aliasDefine();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 91;
				letStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 92;
				modStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 93;
				asStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 94;
				useStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] As() { return GetTokens(RecParser.As); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As(int i) {
			return GetToken(RecParser.As, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(RecParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(RecParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(RecParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public AsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterAsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitAsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsStatementContext asStatement() {
		AsStatementContext _localctx = new AsStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_asStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(As);
			State = 98;
			typename();
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 99;
				Match(Identifier);
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2212382310400L) != 0)) {
				{
				{
				State = 105;
				topLevelStatement();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 111;
			Match(End);
			State = 112;
			Match(As);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleScopedIdentifierContext : ParserRuleContext {
		public IToken _Identifier;
		public IList<IToken> _Parts = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(RecParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(RecParser.Identifier, i);
		}
		public SimpleScopedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleScopedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterSimpleScopedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitSimpleScopedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleScopedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleScopedIdentifierContext simpleScopedIdentifier() {
		SimpleScopedIdentifierContext _localctx = new SimpleScopedIdentifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleScopedIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 114;
			_localctx._Identifier = Match(Identifier);
			_localctx._Parts.Add(_localctx._Identifier);
			State = 119;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 115;
					Match(T__0);
					State = 116;
					_localctx._Identifier = Match(Identifier);
					_localctx._Parts.Add(_localctx._Identifier);
					}
					} 
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModStatementContext : ParserRuleContext {
		public Re.C.Definitions.Scope? Scope = null;
		public SimpleScopedIdentifierContext ModuleIdent;
		public TopLevelStatementContext _topLevelStatement;
		public IList<TopLevelStatementContext> _Substatements = new List<TopLevelStatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mod() { return GetTokens(RecParser.Mod); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod(int i) {
			return GetToken(RecParser.Mod, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleScopedIdentifierContext simpleScopedIdentifier() {
			return GetRuleContext<SimpleScopedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(RecParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public ModStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterModStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitModStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModStatementContext modStatement() {
		ModStatementContext _localctx = new ModStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_modStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(Mod);
			State = 123;
			_localctx.ModuleIdent = simpleScopedIdentifier();
			State = 127;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 124;
					_localctx._topLevelStatement = topLevelStatement();
					_localctx._Substatements.Add(_localctx._topLevelStatement);
					}
					} 
				}
				State = 129;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 130;
				Match(End);
				State = 131;
				Match(Mod);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseStatementContext : ParserRuleContext {
		public Re.C.Definitions.Scope? ImportedScope = null;
		public SimpleScopedIdentifierContext Ident;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Use() { return GetToken(RecParser.Use, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleScopedIdentifierContext simpleScopedIdentifier() {
			return GetRuleContext<SimpleScopedIdentifierContext>(0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterUseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitUseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseStatementContext useStatement() {
		UseStatementContext _localctx = new UseStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_useStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(Use);
			State = 135;
			_localctx.Ident = simpleScopedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateHeaderContext : ParserRuleContext {
		public IToken _Identifier;
		public IList<IToken> _Args = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(RecParser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(RecParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(RecParser.Identifier, i);
		}
		public TemplateHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterTemplateHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitTemplateHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateHeaderContext templateHeader() {
		TemplateHeaderContext _localctx = new TemplateHeaderContext(Context, State);
		EnterRule(_localctx, 12, RULE_templateHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(Template);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 138;
				_localctx._Identifier = Match(Identifier);
				_localctx._Args.Add(_localctx._Identifier);
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldDefineContext : ParserRuleContext {
		public IToken Name;
		public TypenameContext FieldType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RecParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public StructFieldDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structFieldDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterStructFieldDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitStructFieldDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructFieldDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructFieldDefineContext structFieldDefine() {
		StructFieldDefineContext _localctx = new StructFieldDefineContext(Context, State);
		EnterRule(_localctx, 14, RULE_structFieldDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_localctx.Name = Match(Identifier);
			State = 144;
			_localctx.FieldType = typename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefineContext : ParserRuleContext {
		public Re.C.Types.StructType? DefinedType = null;
		public IToken Name;
		public StructFieldDefineContext _structFieldDefine;
		public IList<StructFieldDefineContext> _Fields = new List<StructFieldDefineContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(RecParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(RecParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(RecParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RecParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateHeaderContext templateHeader() {
			return GetRuleContext<TemplateHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldDefineContext[] structFieldDefine() {
			return GetRuleContexts<StructFieldDefineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldDefineContext structFieldDefine(int i) {
			return GetRuleContext<StructFieldDefineContext>(i);
		}
		public StructDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterStructDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitStructDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefineContext structDefine() {
		StructDefineContext _localctx = new StructDefineContext(Context, State);
		EnterRule(_localctx, 16, RULE_structDefine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 146;
				templateHeader();
				}
			}

			State = 149;
			Match(Struct);
			State = 150;
			_localctx.Name = Match(Identifier);
			State = 151;
			Match(OpenBrace);
			State = 157;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 152;
					_localctx._structFieldDefine = structFieldDefine();
					_localctx._Fields.Add(_localctx._structFieldDefine);
					State = 153;
					Match(T__1);
					}
					} 
				}
				State = 159;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 160;
				_localctx._structFieldDefine = structFieldDefine();
				_localctx._Fields.Add(_localctx._structFieldDefine);
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 161;
					Match(T__1);
					}
				}

				}
			}

			State = 166;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnArgumentDefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RecParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public FnArgumentDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnArgumentDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterFnArgumentDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitFnArgumentDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnArgumentDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnArgumentDefineContext fnArgumentDefine() {
		FnArgumentDefineContext _localctx = new FnArgumentDefineContext(Context, State);
		EnterRule(_localctx, 18, RULE_fnArgumentDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(Identifier);
			State = 169;
			typename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnDefineContext : ParserRuleContext {
		public Re.C.Definitions.Function? DefinedFunction = null;
		public Re.C.Syntax.BoundSyntax[]? BoundStatements = null;
		public IToken Name;
		public FnArgumentDefineContext _fnArgumentDefine;
		public IList<FnArgumentDefineContext> _Args = new List<FnArgumentDefineContext>();
		public TypenameContext Ret;
		public BlockContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fn() { return GetToken(RecParser.Fn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(RecParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(RecParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RecParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateHeaderContext templateHeader() {
			return GetRuleContext<TemplateHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnArgumentDefineContext[] fnArgumentDefine() {
			return GetRuleContexts<FnArgumentDefineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FnArgumentDefineContext fnArgumentDefine(int i) {
			return GetRuleContext<FnArgumentDefineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public FnDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterFnDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitFnDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnDefineContext fnDefine() {
		FnDefineContext _localctx = new FnDefineContext(Context, State);
		EnterRule(_localctx, 20, RULE_fnDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 171;
				templateHeader();
				}
			}

			State = 174;
			Match(Fn);
			State = 175;
			_localctx.Name = Match(Identifier);
			State = 176;
			Match(OpenParen);
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 177;
				_localctx._fnArgumentDefine = fnArgumentDefine();
				_localctx._Args.Add(_localctx._fnArgumentDefine);
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 178;
					Match(T__1);
					State = 179;
					_localctx._fnArgumentDefine = fnArgumentDefine();
					_localctx._Args.Add(_localctx._fnArgumentDefine);
					}
					}
					State = 184;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 187;
			Match(CloseParen);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 306816520711831552L) != 0)) {
				{
				State = 188;
				_localctx.Ret = typename();
				}
			}

			State = 191;
			_localctx.Body = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasDefineContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(RecParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(RecParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RecParser.Identifier, 0); }
		public AliasDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterAliasDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitAliasDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasDefineContext aliasDefine() {
		AliasDefineContext _localctx = new AliasDefineContext(Context, State);
		EnterRule(_localctx, 22, RULE_aliasDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(Type);
			State = 194;
			_localctx.Name = Match(Identifier);
			State = 195;
			Match(Equal);
			State = 196;
			typename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetStatementContext letStatement() {
			return GetRuleContext<LetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeferStatementContext deferStatement() {
			return GetRuleContext<DeferStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				assignStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				letStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 200;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 201;
				whileStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 202;
				deferStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 203;
				returnStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 204;
				continueStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 205;
				breakStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 206;
				block();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 207;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Statements = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(RecParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(RecParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(OpenBrace);
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 90626972713682944L) != 0)) {
				{
				{
				State = 211;
				_localctx._statement = statement();
				_localctx._Statements.Add(_localctx._statement);
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 217;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(RecParser.Continue, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(Continue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(RecParser.Break, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(Break);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(RecParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(Return);
			State = 224;
			_localctx.Value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeferStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Defer() { return GetToken(RecParser.Defer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DeferStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deferStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterDeferStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitDeferStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeferStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeferStatementContext deferStatement() {
		DeferStatementContext _localctx = new DeferStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_deferStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(Defer);
			State = 227;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext Cond;
		public BlockContext Body;
		public IfTailContext Tail;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(RecParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfTailContext ifTail() {
			return GetRuleContext<IfTailContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(If);
			State = 230;
			_localctx.Cond = expression(0);
			State = 231;
			_localctx.Body = block();
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 232;
				_localctx.Tail = ifTail();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfTailContext : ParserRuleContext {
		public IfTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifTail; } }
	 
		public IfTailContext() { }
		public virtual void CopyFrom(IfTailContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseStatementContext : IfTailContext {
		public BlockContext EndBlock;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(RecParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStatementContext(IfTailContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElifStatementContext : IfTailContext {
		public IfStatementContext Elif;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(RecParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElifStatementContext(IfTailContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfTailContext ifTail() {
		IfTailContext _localctx = new IfTailContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifTail);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new ElseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				Match(Else);
				State = 236;
				((ElseStatementContext)_localctx).EndBlock = block();
				}
				break;
			case 2:
				_localctx = new ElifStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 237;
				Match(Else);
				State = 238;
				((ElifStatementContext)_localctx).Elif = ifStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext Cond;
		public BlockContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(RecParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(While);
			State = 242;
			_localctx.Cond = expression(0);
			State = 243;
			_localctx.Body = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		public ExpressionContext Target;
		public ExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(RecParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitAssignStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			_localctx.Target = expression(0);
			State = 246;
			Match(Equal);
			State = 247;
			_localctx.Value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStatementContext : ParserRuleContext {
		public IToken Spec;
		public IToken Target;
		public TypenameContext VarType;
		public ExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(RecParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RecParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(RecParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(RecParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public LetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterLetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitLetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStatementContext letStatement() {
		LetStatementContext _localctx = new LetStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_letStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_localctx.Spec = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==Var || _la==Let) ) {
				_localctx.Spec = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 250;
			_localctx.Target = Match(Identifier);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 306816520711831552L) != 0)) {
				{
				State = 251;
				_localctx.VarType = typename();
				}
			}

			State = 254;
			Match(Equal);
			State = 255;
			_localctx.Value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameFnArgsContext : ParserRuleContext {
		public TypenameContext ArgType;
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RecParser.Identifier, 0); }
		public TypenameFnArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typenameFnArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterTypenameFnArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitTypenameFnArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypenameFnArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypenameFnArgsContext typenameFnArgs() {
		TypenameFnArgsContext _localctx = new TypenameFnArgsContext(Context, State);
		EnterRule(_localctx, 46, RULE_typenameFnArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 257;
				Match(Identifier);
				}
				break;
			}
			State = 260;
			_localctx.ArgType = typename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
	 
		public TypenameContext() { }
		public virtual void CopyFrom(TypenameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypenameWrappedContext : TypenameContext {
		public TypenameContext Inner;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(RecParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(RecParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypenameWrappedContext(TypenameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterTypenameWrapped(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitTypenameWrapped(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypenameWrapped(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypenameGenericContext : TypenameContext {
		public TypenameContext Base;
		public TypenameContext _typename;
		public IList<TypenameContext> _Args = new List<TypenameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(RecParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(RecParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		public TypenameGenericContext(TypenameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterTypenameGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitTypenameGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypenameGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypenameFnContext : TypenameContext {
		public TypenameFnArgsContext _typenameFnArgs;
		public IList<TypenameFnArgsContext> _Args = new List<TypenameFnArgsContext>();
		public TypenameContext Ret;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fn() { return GetToken(RecParser.Fn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(RecParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(RecParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameFnArgsContext[] typenameFnArgs() {
			return GetRuleContexts<TypenameFnArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameFnArgsContext typenameFnArgs(int i) {
			return GetRuleContext<TypenameFnArgsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypenameFnContext(TypenameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterTypenameFn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitTypenameFn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypenameFn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypenameArrayContext : TypenameContext {
		public TypenameContext Base;
		public IToken Count;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenIndex() { return GetToken(RecParser.OpenIndex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseIndex() { return GetToken(RecParser.CloseIndex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(RecParser.Integer, 0); }
		public TypenameArrayContext(TypenameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterTypenameArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitTypenameArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypenameArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypenameSingleContext : TypenameContext {
		public SimpleScopedIdentifierContext Ident;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleScopedIdentifierContext simpleScopedIdentifier() {
			return GetRuleContext<SimpleScopedIdentifierContext>(0);
		}
		public TypenameSingleContext(TypenameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterTypenameSingle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitTypenameSingle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypenameSingle(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypenamePointerContext : TypenameContext {
		public TypenameContext Base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(RecParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypenamePointerContext(TypenameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterTypenamePointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitTypenamePointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypenamePointer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 48, RULE_typename);
		int _la;
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				_localctx = new TypenameSingleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 262;
				((TypenameSingleContext)_localctx).Ident = simpleScopedIdentifier();
				}
				break;
			case 2:
				_localctx = new TypenameWrappedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 263;
				Match(OpenParen);
				State = 264;
				((TypenameWrappedContext)_localctx).Inner = typename();
				State = 265;
				Match(CloseParen);
				}
				break;
			case 3:
				_localctx = new TypenameGenericContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 267;
				Match(OpenParen);
				State = 268;
				((TypenameGenericContext)_localctx).Base = typename();
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 269;
					((TypenameGenericContext)_localctx)._typename = typename();
					((TypenameGenericContext)_localctx)._Args.Add(((TypenameGenericContext)_localctx)._typename);
					}
					}
					State = 272;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 306816520711831552L) != 0) );
				State = 274;
				Match(CloseParen);
				}
				break;
			case 4:
				_localctx = new TypenamePointerContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 276;
				Match(Star);
				State = 277;
				((TypenamePointerContext)_localctx).Base = typename();
				}
				break;
			case 5:
				_localctx = new TypenameArrayContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 278;
				Match(OpenIndex);
				State = 279;
				((TypenameArrayContext)_localctx).Base = typename();
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 280;
					Match(T__2);
					State = 281;
					((TypenameArrayContext)_localctx).Count = Match(Integer);
					}
				}

				State = 284;
				Match(CloseIndex);
				}
				break;
			case 6:
				_localctx = new TypenameFnContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 286;
				Match(Fn);
				State = 287;
				Match(OpenParen);
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 306816520711831552L) != 0)) {
					{
					State = 288;
					((TypenameFnContext)_localctx)._typenameFnArgs = typenameFnArgs();
					((TypenameFnContext)_localctx)._Args.Add(((TypenameFnContext)_localctx)._typenameFnArgs);
					State = 293;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__1) {
						{
						{
						State = 289;
						Match(T__1);
						State = 290;
						((TypenameFnContext)_localctx)._typenameFnArgs = typenameFnArgs();
						((TypenameFnContext)_localctx)._Args.Add(((TypenameFnContext)_localctx)._typenameFnArgs);
						}
						}
						State = 295;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 298;
				Match(CloseParen);
				State = 300;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 299;
					((TypenameFnContext)_localctx).Ret = typename();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
	 
		public LogicalOperatorContext() { }
		public virtual void CopyFrom(LogicalOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrOperatorContext : LogicalOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(RecParser.Or, 0); }
		public OrOperatorContext(LogicalOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterOrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitOrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOperatorContext : LogicalOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(RecParser.And, 0); }
		public AndOperatorContext(LogicalOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterAndOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitAndOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 50, RULE_logicalOperator);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case And:
				_localctx = new AndOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 304;
				Match(And);
				}
				break;
			case Or:
				_localctx = new OrOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 305;
				Match(Or);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompOperatorContext : ParserRuleContext {
		public CompOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compOperator; } }
	 
		public CompOperatorContext() { }
		public virtual void CopyFrom(CompOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EqualsOperatorContext : CompOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CompEqual() { return GetToken(RecParser.CompEqual, 0); }
		public EqualsOperatorContext(CompOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterEqualsOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitEqualsOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualsOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanOperatorContext : CompOperatorContext {
		public LessThanOperatorContext(CompOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterLessThanOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitLessThanOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanOperatorContext : CompOperatorContext {
		public GreaterThanOperatorContext(CompOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterGreaterThanOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitGreaterThanOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualsOperatorContext : CompOperatorContext {
		public NotEqualsOperatorContext(CompOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterNotEqualsOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitNotEqualsOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqualsOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessEqualOperatorContext : CompOperatorContext {
		public LessEqualOperatorContext(CompOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterLessEqualOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitLessEqualOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterEqualOperatorContext : CompOperatorContext {
		public GreaterEqualOperatorContext(CompOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterGreaterEqualOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitGreaterEqualOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompOperatorContext compOperator() {
		CompOperatorContext _localctx = new CompOperatorContext(Context, State);
		EnterRule(_localctx, 52, RULE_compOperator);
		try {
			State = 314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CompEqual:
				_localctx = new EqualsOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 308;
				Match(CompEqual);
				}
				break;
			case T__3:
				_localctx = new NotEqualsOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 309;
				Match(T__3);
				}
				break;
			case T__4:
				_localctx = new GreaterThanOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 310;
				Match(T__4);
				}
				break;
			case T__5:
				_localctx = new LessThanOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 311;
				Match(T__5);
				}
				break;
			case T__6:
				_localctx = new GreaterEqualOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 312;
				Match(T__6);
				}
				break;
			case T__7:
				_localctx = new LessEqualOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 313;
				Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MuldivOperatorContext : ParserRuleContext {
		public MuldivOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_muldivOperator; } }
	 
		public MuldivOperatorContext() { }
		public virtual void CopyFrom(MuldivOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulOperatorContext : MuldivOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(RecParser.Star, 0); }
		public MulOperatorContext(MuldivOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterMulOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitMulOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivOperatorContext : MuldivOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(RecParser.Slash, 0); }
		public DivOperatorContext(MuldivOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterDivOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitDivOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MuldivOperatorContext muldivOperator() {
		MuldivOperatorContext _localctx = new MuldivOperatorContext(Context, State);
		EnterRule(_localctx, 54, RULE_muldivOperator);
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Star:
				_localctx = new MulOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 316;
				Match(Star);
				}
				break;
			case Slash:
				_localctx = new DivOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 317;
				Match(Slash);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseOperatorContext : ParserRuleContext {
		public BitwiseOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOperator; } }
	 
		public BitwiseOperatorContext() { }
		public virtual void CopyFrom(BitwiseOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BitShiftRightOperatorContext : BitwiseOperatorContext {
		public BitShiftRightOperatorContext(BitwiseOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterBitShiftRightOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitBitShiftRightOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftRightOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndOperatorContext : BitwiseOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(RecParser.Ampersand, 0); }
		public BitAndOperatorContext(BitwiseOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterBitAndOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitBitAndOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftLeftOperatorContext : BitwiseOperatorContext {
		public BitShiftLeftOperatorContext(BitwiseOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterBitShiftLeftOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitBitShiftLeftOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftLeftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrOperatorContext : BitwiseOperatorContext {
		public BitOrOperatorContext(BitwiseOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterBitOrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitBitOrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXorOperatorContext : BitwiseOperatorContext {
		public BitXorOperatorContext(BitwiseOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterBitXorOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitBitXorOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXorOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOperatorContext bitwiseOperator() {
		BitwiseOperatorContext _localctx = new BitwiseOperatorContext(Context, State);
		EnterRule(_localctx, 56, RULE_bitwiseOperator);
		try {
			State = 327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ampersand:
				_localctx = new BitAndOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				Match(Ampersand);
				}
				break;
			case T__8:
				_localctx = new BitOrOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				Match(T__8);
				}
				break;
			case T__9:
				_localctx = new BitXorOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 322;
				Match(T__9);
				}
				break;
			case T__5:
				_localctx = new BitShiftLeftOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 323;
				Match(T__5);
				State = 324;
				Match(T__5);
				}
				break;
			case T__4:
				_localctx = new BitShiftRightOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 325;
				Match(T__4);
				State = 326;
				Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddsubOperatorContext : ParserRuleContext {
		public AddsubOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addsubOperator; } }
	 
		public AddsubOperatorContext() { }
		public virtual void CopyFrom(AddsubOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddOperatorContext : AddsubOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(RecParser.Plus, 0); }
		public AddOperatorContext(AddsubOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterAddOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitAddOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubOperatorContext : AddsubOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(RecParser.Minus, 0); }
		public SubOperatorContext(AddsubOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterSubOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitSubOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddsubOperatorContext addsubOperator() {
		AddsubOperatorContext _localctx = new AddsubOperatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_addsubOperator);
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Plus:
				_localctx = new AddOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 329;
				Match(Plus);
				}
				break;
			case Minus:
				_localctx = new SubOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				Match(Minus);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
	 
		public UnaryOperatorContext() { }
		public virtual void CopyFrom(UnaryOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegateOperatorContext : UnaryOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(RecParser.Minus, 0); }
		public NegateOperatorContext(UnaryOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterNegateOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitNegateOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PositOperatorContext : UnaryOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(RecParser.Plus, 0); }
		public PositOperatorContext(UnaryOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterPositOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitPositOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotOperatorContext : UnaryOperatorContext {
		public BitNotOperatorContext(UnaryOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterBitNotOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitBitNotOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_unaryOperator);
		try {
			State = 336;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Plus:
				_localctx = new PositOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				Match(Plus);
				}
				break;
			case Minus:
				_localctx = new NegateOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				Match(Minus);
				}
				break;
			case T__10:
				_localctx = new BitNotOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 335;
				Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryOperatorContext : ParserRuleContext {
		public MemoryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryOperator; } }
	 
		public MemoryOperatorContext() { }
		public virtual void CopyFrom(MemoryOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DereferenceOperatorContext : MemoryOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(RecParser.Star, 0); }
		public DereferenceOperatorContext(MemoryOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterDereferenceOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitDereferenceOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDereferenceOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddressofOperatorContext : MemoryOperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(RecParser.Ampersand, 0); }
		public AddressofOperatorContext(MemoryOperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterAddressofOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitAddressofOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddressofOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemoryOperatorContext memoryOperator() {
		MemoryOperatorContext _localctx = new MemoryOperatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_memoryOperator);
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Star:
				_localctx = new DereferenceOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 338;
				Match(Star);
				}
				break;
			case Ampersand:
				_localctx = new AddressofOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 339;
				Match(Ampersand);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DotExpressionContext : ExpressionContext {
		public ExpressionContext Base;
		public DotComponentContext Field;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotComponentContext dotComponent() {
			return GetRuleContext<DotComponentContext>(0);
		}
		public DotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterDotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitDotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TermExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterTermExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitTermExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext LHS;
		public ExpressionContext RHS;
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompOperatorContext compOperator() {
			return GetRuleContext<CompOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwiseOperatorContext bitwiseOperator() {
			return GetRuleContext<BitwiseOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MuldivOperatorContext muldivOperator() {
			return GetRuleContext<MuldivOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddsubOperatorContext addsubOperator() {
			return GetRuleContext<AddsubOperatorContext>(0);
		}
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemoryExpressionContext : ExpressionContext {
		public ExpressionContext Operand;
		public MemoryOperatorContext Op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryOperatorContext memoryOperator() {
			return GetRuleContext<MemoryOperatorContext>(0);
		}
		public MemoryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterMemoryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitMemoryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemoryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public UnaryOperatorContext Op;
		public ExpressionContext Operand;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ExpressionContext Operand;
		public TypenameContext TargetType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cast() { return GetToken(RecParser.Cast, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(RecParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(RecParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext Target;
		public TemplateInstantiationContext TemplateInst;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Args = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(RecParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(RecParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateInstantiationContext templateInstantiation() {
			return GetRuleContext<TemplateInstantiationContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
			case Plus:
			case Minus:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 343;
				((UnaryExpressionContext)_localctx).Op = unaryOperator();
				State = 344;
				((UnaryExpressionContext)_localctx).Operand = expression(5);
				}
				break;
			case New:
			case True:
			case False:
			case Identifier:
			case Integer:
			case Float:
			case String:
			case OpenParen:
				{
				_localctx = new TermExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 346;
				term();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 398;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 396;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).LHS = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 349;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 350;
						logicalOperator();
						State = 351;
						((BinaryExpressionContext)_localctx).RHS = expression(12);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).LHS = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 353;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 354;
						compOperator();
						State = 355;
						((BinaryExpressionContext)_localctx).RHS = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).LHS = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 357;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 358;
						bitwiseOperator();
						State = 359;
						((BinaryExpressionContext)_localctx).RHS = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).LHS = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 361;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 362;
						muldivOperator();
						State = 363;
						((BinaryExpressionContext)_localctx).RHS = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).LHS = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 365;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 366;
						addsubOperator();
						State = 367;
						((BinaryExpressionContext)_localctx).RHS = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CastExpressionContext)_localctx).Operand = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 369;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 370;
						Match(Cast);
						State = 371;
						Match(OpenParen);
						State = 372;
						((CastExpressionContext)_localctx).TargetType = typename();
						State = 373;
						Match(CloseParen);
						}
						break;
					case 7:
						{
						_localctx = new MemoryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MemoryExpressionContext)_localctx).Operand = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 375;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 376;
						((MemoryExpressionContext)_localctx).Op = memoryOperator();
						}
						break;
					case 8:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CallExpressionContext)_localctx).Target = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 377;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 379;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__11) {
							{
							State = 378;
							((CallExpressionContext)_localctx).TemplateInst = templateInstantiation();
							}
						}

						State = 381;
						Match(OpenParen);
						State = 390;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18569377540474880L) != 0)) {
							{
							State = 382;
							((CallExpressionContext)_localctx)._expression = expression(0);
							((CallExpressionContext)_localctx)._Args.Add(((CallExpressionContext)_localctx)._expression);
							State = 387;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==T__1) {
								{
								{
								State = 383;
								Match(T__1);
								State = 384;
								((CallExpressionContext)_localctx)._expression = expression(0);
								((CallExpressionContext)_localctx)._Args.Add(((CallExpressionContext)_localctx)._expression);
								}
								}
								State = 389;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 392;
						Match(CloseParen);
						}
						break;
					case 9:
						{
						_localctx = new DotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((DotExpressionContext)_localctx).Base = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 393;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 394;
						Match(T__0);
						State = 395;
						((DotExpressionContext)_localctx).Field = dotComponent();
						}
						break;
					}
					} 
				}
				State = 400;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TemplateInstantiationContext : ParserRuleContext {
		public TypenameContext _typename;
		public IList<TypenameContext> _args = new List<TypenameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		public TemplateInstantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateInstantiation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterTemplateInstantiation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitTemplateInstantiation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateInstantiation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateInstantiationContext templateInstantiation() {
		TemplateInstantiationContext _localctx = new TemplateInstantiationContext(Context, State);
		EnterRule(_localctx, 66, RULE_templateInstantiation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(T__11);
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 306816520711831552L) != 0)) {
				{
				{
				State = 402;
				_localctx._typename = typename();
				_localctx._args.Add(_localctx._typename);
				}
				}
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 408;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructExprAssignContext : ParserRuleContext {
		public IToken Field;
		public ExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(RecParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RecParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StructExprAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structExprAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterStructExprAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitStructExprAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructExprAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructExprAssignContext structExprAssign() {
		StructExprAssignContext _localctx = new StructExprAssignContext(Context, State);
		EnterRule(_localctx, 68, RULE_structExprAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_localctx.Field = Match(Identifier);
			State = 411;
			Match(Equal);
			State = 412;
			_localctx.Value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructExpressionContext : ParserRuleContext {
		public TypenameContext StructType;
		public StructExprAssignContext _structExprAssign;
		public IList<StructExprAssignContext> _Parts = new List<StructExprAssignContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(RecParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(RecParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(RecParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructExprAssignContext[] structExprAssign() {
			return GetRuleContexts<StructExprAssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructExprAssignContext structExprAssign(int i) {
			return GetRuleContext<StructExprAssignContext>(i);
		}
		public StructExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterStructExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitStructExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructExpressionContext structExpression() {
		StructExpressionContext _localctx = new StructExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_structExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(New);
			State = 415;
			_localctx.StructType = typename();
			State = 416;
			Match(OpenBrace);
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 417;
				_localctx._structExprAssign = structExprAssign();
				_localctx._Parts.Add(_localctx._structExprAssign);
				}
				}
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			State = 422;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RecParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(RecParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public DotComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterDotComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitDotComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotComponentContext dotComponent() {
		DotComponentContext _localctx = new DotComponentContext(Context, State);
		EnterRule(_localctx, 72, RULE_dotComponent);
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 424;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 425;
				Match(Identifier);
				State = 426;
				Match(As);
				State = 427;
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(RecParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(RecParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public VariableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterVariableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitVariableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableReferenceContext variableReference() {
		VariableReferenceContext _localctx = new VariableReferenceContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableReference);
		try {
			State = 434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431;
				Match(Identifier);
				State = 432;
				Match(As);
				State = 433;
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableReferenceContext variableReference() {
			return GetRuleContext<VariableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(RecParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(RecParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructExpressionContext structExpression() {
			return GetRuleContext<StructExpressionContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 76, RULE_term);
		try {
			State = 443;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case Integer:
			case Float:
			case String:
				EnterOuterAlt(_localctx, 1);
				{
				State = 436;
				literal();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 437;
				variableReference();
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 438;
				Match(OpenParen);
				State = 439;
				expression(0);
				State = 440;
				Match(CloseParen);
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 4);
				{
				State = 442;
				structExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(RecParser.String, 0); }
		public StringLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(RecParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(RecParser.False, 0); }
		public BoolLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(RecParser.Float, 0); }
		public FloatLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerLiteralContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(RecParser.Integer, 0); }
		public IntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecListener typedListener = listener as IRecListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRecVisitor<TResult> typedVisitor = visitor as IRecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 78, RULE_literal);
		try {
			State = 450;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 445;
				Match(Integer);
				}
				break;
			case Float:
				_localctx = new FloatLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 446;
				Match(Float);
				}
				break;
			case String:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 447;
				Match(String);
				}
				break;
			case True:
				_localctx = new BoolLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 448;
				Match(True);
				}
				break;
			case False:
				_localctx = new BoolLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 449;
				Match(False);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,59,453,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,5,0,82,8,0,10,0,12,0,85,9,
		0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,96,8,1,1,2,1,2,1,2,5,2,101,8,
		2,10,2,12,2,104,9,2,1,2,5,2,107,8,2,10,2,12,2,110,9,2,1,2,1,2,1,2,1,3,
		1,3,1,3,5,3,118,8,3,10,3,12,3,121,9,3,1,4,1,4,1,4,5,4,126,8,4,10,4,12,
		4,129,9,4,1,4,1,4,3,4,133,8,4,1,5,1,5,1,5,1,6,1,6,4,6,140,8,6,11,6,12,
		6,141,1,7,1,7,1,7,1,8,3,8,148,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,156,8,8,
		10,8,12,8,159,9,8,1,8,1,8,3,8,163,8,8,3,8,165,8,8,1,8,1,8,1,9,1,9,1,9,
		1,10,3,10,173,8,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,181,8,10,10,10,12,
		10,184,9,10,3,10,186,8,10,1,10,1,10,3,10,190,8,10,1,10,1,10,1,11,1,11,
		1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,
		209,8,12,1,13,1,13,5,13,213,8,13,10,13,12,13,216,9,13,1,13,1,13,1,14,1,
		14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,234,
		8,18,1,19,1,19,1,19,1,19,3,19,240,8,19,1,20,1,20,1,20,1,20,1,21,1,21,1,
		21,1,21,1,22,1,22,1,22,3,22,253,8,22,1,22,1,22,1,22,1,23,3,23,259,8,23,
		1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,4,24,271,8,24,11,24,
		12,24,272,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,283,8,24,1,24,1,
		24,1,24,1,24,1,24,1,24,1,24,5,24,292,8,24,10,24,12,24,295,9,24,3,24,297,
		8,24,1,24,1,24,3,24,301,8,24,3,24,303,8,24,1,25,1,25,3,25,307,8,25,1,26,
		1,26,1,26,1,26,1,26,1,26,3,26,315,8,26,1,27,1,27,3,27,319,8,27,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,3,28,328,8,28,1,29,1,29,3,29,332,8,29,1,30,
		1,30,1,30,3,30,337,8,30,1,31,1,31,3,31,341,8,31,1,32,1,32,1,32,1,32,1,
		32,3,32,348,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,3,32,380,8,32,1,32,1,32,1,32,1,32,5,32,386,8,
		32,10,32,12,32,389,9,32,3,32,391,8,32,1,32,1,32,1,32,1,32,5,32,397,8,32,
		10,32,12,32,400,9,32,1,33,1,33,5,33,404,8,33,10,33,12,33,407,9,33,1,33,
		1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,4,35,419,8,35,11,35,12,35,
		420,1,35,1,35,1,36,1,36,1,36,1,36,3,36,429,8,36,1,37,1,37,1,37,1,37,3,
		37,435,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,444,8,38,1,39,1,39,
		1,39,1,39,1,39,3,39,451,8,39,1,39,0,1,64,40,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,0,1,1,0,16,17,496,0,83,1,0,0,0,2,95,1,0,0,0,4,97,1,0,0,
		0,6,114,1,0,0,0,8,122,1,0,0,0,10,134,1,0,0,0,12,137,1,0,0,0,14,143,1,0,
		0,0,16,147,1,0,0,0,18,168,1,0,0,0,20,172,1,0,0,0,22,193,1,0,0,0,24,208,
		1,0,0,0,26,210,1,0,0,0,28,219,1,0,0,0,30,221,1,0,0,0,32,223,1,0,0,0,34,
		226,1,0,0,0,36,229,1,0,0,0,38,239,1,0,0,0,40,241,1,0,0,0,42,245,1,0,0,
		0,44,249,1,0,0,0,46,258,1,0,0,0,48,302,1,0,0,0,50,306,1,0,0,0,52,314,1,
		0,0,0,54,318,1,0,0,0,56,327,1,0,0,0,58,331,1,0,0,0,60,336,1,0,0,0,62,340,
		1,0,0,0,64,347,1,0,0,0,66,401,1,0,0,0,68,410,1,0,0,0,70,414,1,0,0,0,72,
		428,1,0,0,0,74,434,1,0,0,0,76,443,1,0,0,0,78,450,1,0,0,0,80,82,3,2,1,0,
		81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,86,1,0,0,0,
		85,83,1,0,0,0,86,87,5,0,0,1,87,1,1,0,0,0,88,96,3,20,10,0,89,96,3,16,8,
		0,90,96,3,22,11,0,91,96,3,44,22,0,92,96,3,8,4,0,93,96,3,4,2,0,94,96,3,
		10,5,0,95,88,1,0,0,0,95,89,1,0,0,0,95,90,1,0,0,0,95,91,1,0,0,0,95,92,1,
		0,0,0,95,93,1,0,0,0,95,94,1,0,0,0,96,3,1,0,0,0,97,98,5,41,0,0,98,102,3,
		48,24,0,99,101,5,43,0,0,100,99,1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,
		102,103,1,0,0,0,103,108,1,0,0,0,104,102,1,0,0,0,105,107,3,2,1,0,106,105,
		1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,111,1,0,0,
		0,110,108,1,0,0,0,111,112,5,18,0,0,112,113,5,41,0,0,113,5,1,0,0,0,114,
		119,5,43,0,0,115,116,5,1,0,0,116,118,5,43,0,0,117,115,1,0,0,0,118,121,
		1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,7,1,0,0,0,121,119,1,0,0,0,
		122,123,5,32,0,0,123,127,3,6,3,0,124,126,3,2,1,0,125,124,1,0,0,0,126,129,
		1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,132,1,0,0,0,129,127,1,0,0,
		0,130,131,5,18,0,0,131,133,5,32,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,
		9,1,0,0,0,134,135,5,33,0,0,135,136,3,6,3,0,136,11,1,0,0,0,137,139,5,28,
		0,0,138,140,5,43,0,0,139,138,1,0,0,0,140,141,1,0,0,0,141,139,1,0,0,0,141,
		142,1,0,0,0,142,13,1,0,0,0,143,144,5,43,0,0,144,145,3,48,24,0,145,15,1,
		0,0,0,146,148,3,12,6,0,147,146,1,0,0,0,147,148,1,0,0,0,148,149,1,0,0,0,
		149,150,5,27,0,0,150,151,5,43,0,0,151,157,5,56,0,0,152,153,3,14,7,0,153,
		154,5,2,0,0,154,156,1,0,0,0,155,152,1,0,0,0,156,159,1,0,0,0,157,155,1,
		0,0,0,157,158,1,0,0,0,158,164,1,0,0,0,159,157,1,0,0,0,160,162,3,14,7,0,
		161,163,5,2,0,0,162,161,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,160,
		1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,167,5,57,0,0,167,17,1,0,0,
		0,168,169,5,43,0,0,169,170,3,48,24,0,170,19,1,0,0,0,171,173,3,12,6,0,172,
		171,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,5,22,0,0,175,176,5,
		43,0,0,176,185,5,54,0,0,177,182,3,18,9,0,178,179,5,2,0,0,179,181,3,18,
		9,0,180,178,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,
		186,1,0,0,0,184,182,1,0,0,0,185,177,1,0,0,0,185,186,1,0,0,0,186,187,1,
		0,0,0,187,189,5,55,0,0,188,190,3,48,24,0,189,188,1,0,0,0,189,190,1,0,0,
		0,190,191,1,0,0,0,191,192,3,26,13,0,192,21,1,0,0,0,193,194,5,26,0,0,194,
		195,5,43,0,0,195,196,5,52,0,0,196,197,3,48,24,0,197,23,1,0,0,0,198,209,
		3,42,21,0,199,209,3,44,22,0,200,209,3,36,18,0,201,209,3,40,20,0,202,209,
		3,34,17,0,203,209,3,32,16,0,204,209,3,28,14,0,205,209,3,30,15,0,206,209,
		3,26,13,0,207,209,3,64,32,0,208,198,1,0,0,0,208,199,1,0,0,0,208,200,1,
		0,0,0,208,201,1,0,0,0,208,202,1,0,0,0,208,203,1,0,0,0,208,204,1,0,0,0,
		208,205,1,0,0,0,208,206,1,0,0,0,208,207,1,0,0,0,209,25,1,0,0,0,210,214,
		5,56,0,0,211,213,3,24,12,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,
		0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,218,5,57,0,0,218,
		27,1,0,0,0,219,220,5,23,0,0,220,29,1,0,0,0,221,222,5,24,0,0,222,31,1,0,
		0,0,223,224,5,30,0,0,224,225,3,64,32,0,225,33,1,0,0,0,226,227,5,25,0,0,
		227,228,3,26,13,0,228,35,1,0,0,0,229,230,5,19,0,0,230,231,3,64,32,0,231,
		233,3,26,13,0,232,234,3,38,19,0,233,232,1,0,0,0,233,234,1,0,0,0,234,37,
		1,0,0,0,235,236,5,20,0,0,236,240,3,26,13,0,237,238,5,20,0,0,238,240,3,
		36,18,0,239,235,1,0,0,0,239,237,1,0,0,0,240,39,1,0,0,0,241,242,5,21,0,
		0,242,243,3,64,32,0,243,244,3,26,13,0,244,41,1,0,0,0,245,246,3,64,32,0,
		246,247,5,52,0,0,247,248,3,64,32,0,248,43,1,0,0,0,249,250,7,0,0,0,250,
		252,5,43,0,0,251,253,3,48,24,0,252,251,1,0,0,0,252,253,1,0,0,0,253,254,
		1,0,0,0,254,255,5,52,0,0,255,256,3,64,32,0,256,45,1,0,0,0,257,259,5,43,
		0,0,258,257,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,261,3,48,24,0,
		261,47,1,0,0,0,262,303,3,6,3,0,263,264,5,54,0,0,264,265,3,48,24,0,265,
		266,5,55,0,0,266,303,1,0,0,0,267,268,5,54,0,0,268,270,3,48,24,0,269,271,
		3,48,24,0,270,269,1,0,0,0,271,272,1,0,0,0,272,270,1,0,0,0,272,273,1,0,
		0,0,273,274,1,0,0,0,274,275,5,55,0,0,275,303,1,0,0,0,276,277,5,49,0,0,
		277,303,3,48,24,0,278,279,5,58,0,0,279,282,3,48,24,0,280,281,5,3,0,0,281,
		283,5,44,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,285,5,
		59,0,0,285,303,1,0,0,0,286,287,5,22,0,0,287,296,5,54,0,0,288,293,3,46,
		23,0,289,290,5,2,0,0,290,292,3,46,23,0,291,289,1,0,0,0,292,295,1,0,0,0,
		293,291,1,0,0,0,293,294,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,296,288,
		1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,300,5,55,0,0,299,301,3,48,
		24,0,300,299,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,262,1,0,0,0,302,
		263,1,0,0,0,302,267,1,0,0,0,302,276,1,0,0,0,302,278,1,0,0,0,302,286,1,
		0,0,0,303,49,1,0,0,0,304,307,5,35,0,0,305,307,5,37,0,0,306,304,1,0,0,0,
		306,305,1,0,0,0,307,51,1,0,0,0,308,315,5,53,0,0,309,315,5,4,0,0,310,315,
		5,5,0,0,311,315,5,6,0,0,312,315,5,7,0,0,313,315,5,8,0,0,314,308,1,0,0,
		0,314,309,1,0,0,0,314,310,1,0,0,0,314,311,1,0,0,0,314,312,1,0,0,0,314,
		313,1,0,0,0,315,53,1,0,0,0,316,319,5,49,0,0,317,319,5,50,0,0,318,316,1,
		0,0,0,318,317,1,0,0,0,319,55,1,0,0,0,320,328,5,51,0,0,321,328,5,9,0,0,
		322,328,5,10,0,0,323,324,5,6,0,0,324,328,5,6,0,0,325,326,5,5,0,0,326,328,
		5,5,0,0,327,320,1,0,0,0,327,321,1,0,0,0,327,322,1,0,0,0,327,323,1,0,0,
		0,327,325,1,0,0,0,328,57,1,0,0,0,329,332,5,47,0,0,330,332,5,48,0,0,331,
		329,1,0,0,0,331,330,1,0,0,0,332,59,1,0,0,0,333,337,5,47,0,0,334,337,5,
		48,0,0,335,337,5,11,0,0,336,333,1,0,0,0,336,334,1,0,0,0,336,335,1,0,0,
		0,337,61,1,0,0,0,338,341,5,49,0,0,339,341,5,51,0,0,340,338,1,0,0,0,340,
		339,1,0,0,0,341,63,1,0,0,0,342,343,6,32,-1,0,343,344,3,60,30,0,344,345,
		3,64,32,5,345,348,1,0,0,0,346,348,3,76,38,0,347,342,1,0,0,0,347,346,1,
		0,0,0,348,398,1,0,0,0,349,350,10,11,0,0,350,351,3,50,25,0,351,352,3,64,
		32,12,352,397,1,0,0,0,353,354,10,10,0,0,354,355,3,52,26,0,355,356,3,64,
		32,11,356,397,1,0,0,0,357,358,10,9,0,0,358,359,3,56,28,0,359,360,3,64,
		32,10,360,397,1,0,0,0,361,362,10,8,0,0,362,363,3,54,27,0,363,364,3,64,
		32,9,364,397,1,0,0,0,365,366,10,7,0,0,366,367,3,58,29,0,367,368,3,64,32,
		8,368,397,1,0,0,0,369,370,10,6,0,0,370,371,5,42,0,0,371,372,5,54,0,0,372,
		373,3,48,24,0,373,374,5,55,0,0,374,397,1,0,0,0,375,376,10,4,0,0,376,397,
		3,62,31,0,377,379,10,3,0,0,378,380,3,66,33,0,379,378,1,0,0,0,379,380,1,
		0,0,0,380,381,1,0,0,0,381,390,5,54,0,0,382,387,3,64,32,0,383,384,5,2,0,
		0,384,386,3,64,32,0,385,383,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,
		388,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,390,382,1,0,0,0,390,391,1,
		0,0,0,391,392,1,0,0,0,392,397,5,55,0,0,393,394,10,2,0,0,394,395,5,1,0,
		0,395,397,3,72,36,0,396,349,1,0,0,0,396,353,1,0,0,0,396,357,1,0,0,0,396,
		361,1,0,0,0,396,365,1,0,0,0,396,369,1,0,0,0,396,375,1,0,0,0,396,377,1,
		0,0,0,396,393,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,
		399,65,1,0,0,0,400,398,1,0,0,0,401,405,5,12,0,0,402,404,3,48,24,0,403,
		402,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,408,1,
		0,0,0,407,405,1,0,0,0,408,409,5,12,0,0,409,67,1,0,0,0,410,411,5,43,0,0,
		411,412,5,52,0,0,412,413,3,64,32,0,413,69,1,0,0,0,414,415,5,29,0,0,415,
		416,3,48,24,0,416,418,5,56,0,0,417,419,3,68,34,0,418,417,1,0,0,0,419,420,
		1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,423,5,57,0,
		0,423,71,1,0,0,0,424,429,5,43,0,0,425,426,5,43,0,0,426,427,5,41,0,0,427,
		429,3,48,24,0,428,424,1,0,0,0,428,425,1,0,0,0,429,73,1,0,0,0,430,435,5,
		43,0,0,431,432,5,43,0,0,432,433,5,41,0,0,433,435,3,48,24,0,434,430,1,0,
		0,0,434,431,1,0,0,0,435,75,1,0,0,0,436,444,3,78,39,0,437,444,3,74,37,0,
		438,439,5,54,0,0,439,440,3,64,32,0,440,441,5,55,0,0,441,444,1,0,0,0,442,
		444,3,70,35,0,443,436,1,0,0,0,443,437,1,0,0,0,443,438,1,0,0,0,443,442,
		1,0,0,0,444,77,1,0,0,0,445,451,5,44,0,0,446,451,5,45,0,0,447,451,5,46,
		0,0,448,451,5,38,0,0,449,451,5,39,0,0,450,445,1,0,0,0,450,446,1,0,0,0,
		450,447,1,0,0,0,450,448,1,0,0,0,450,449,1,0,0,0,451,79,1,0,0,0,47,83,95,
		102,108,119,127,132,141,147,157,162,164,172,182,185,189,208,214,233,239,
		252,258,272,282,293,296,300,302,306,314,318,327,331,336,340,347,379,387,
		390,396,398,405,420,428,434,443,450
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
