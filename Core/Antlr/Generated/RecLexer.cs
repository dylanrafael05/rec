//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from source/Antlr/Rec.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class RecLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, Whitespace=13, SLComment=14, MLComment=15, 
		Var=16, Let=17, End=18, If=19, Else=20, While=21, Fn=22, Continue=23, 
		Break=24, Defer=25, Type=26, Struct=27, Template=28, New=29, Return=30, 
		For=31, Mod=32, Use=33, Auto=34, And=35, Not=36, Or=37, True=38, False=39, 
		Uninit=40, As=41, Cast=42, Identifier=43, Integer=44, Float=45, String=46, 
		Plus=47, Minus=48, Star=49, Slash=50, Ampersand=51, Equal=52, CompEqual=53, 
		OpenParen=54, CloseParen=55, OpenBrace=56, CloseBrace=57, OpenIndex=58, 
		CloseIndex=59;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "LETTER", "DIGIT", "CHAR", "Whitespace", "SLComment", 
		"MLComment", "Var", "Let", "End", "If", "Else", "While", "Fn", "Continue", 
		"Break", "Defer", "Type", "Struct", "Template", "New", "Return", "For", 
		"Mod", "Use", "Auto", "And", "Not", "Or", "True", "False", "Uninit", "As", 
		"Cast", "Identifier", "Integer", "Float", "String", "Plus", "Minus", "Star", 
		"Slash", "Ampersand", "Equal", "CompEqual", "OpenParen", "CloseParen", 
		"OpenBrace", "CloseBrace", "OpenIndex", "CloseIndex"
	};


	    public required Re.C.Vocabulary.Source Source { get; init; }


	public RecLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public RecLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','", "';'", "'!='", "'>'", "'<'", "'<='", "'>='", "'|'", 
		"'^'", "'~'", "'''", null, null, null, "'var'", "'let'", "'end'", "'if'", 
		"'else'", "'while'", "'fn'", "'continue'", "'break'", "'defer'", "'type'", 
		"'struct'", "'template'", "'new'", "'return'", "'for'", "'mod'", "'use'", 
		"'auto'", "'and'", "'not'", "'or'", "'true'", "'false'", "'uninit'", "'as'", 
		"'cast'", null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'&'", "'='", 
		"'=='", "'('", "')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "Whitespace", "SLComment", "MLComment", "Var", "Let", "End", "If", 
		"Else", "While", "Fn", "Continue", "Break", "Defer", "Type", "Struct", 
		"Template", "New", "Return", "For", "Mod", "Use", "Auto", "And", "Not", 
		"Or", "True", "False", "Uninit", "As", "Cast", "Identifier", "Integer", 
		"Float", "String", "Plus", "Minus", "Star", "Slash", "Ampersand", "Equal", 
		"CompEqual", "OpenParen", "CloseParen", "OpenBrace", "CloseBrace", "OpenIndex", 
		"CloseIndex"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rec.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RecLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,59,398,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,
		9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,3,14,160,
		8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,170,8,16,10,16,12,16,
		173,9,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,181,8,17,10,17,12,17,184,9,
		17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
		20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,
		23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,
		28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,
		35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,
		38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,
		41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,
		44,1,44,1,45,4,45,328,8,45,11,45,12,45,329,1,45,1,45,5,45,334,8,45,10,
		45,12,45,337,9,45,1,46,4,46,340,8,46,11,46,12,46,341,1,47,5,47,345,8,47,
		10,47,12,47,348,9,47,1,47,1,47,1,47,1,47,1,47,3,47,355,8,47,1,47,5,47,
		358,8,47,10,47,12,47,361,9,47,1,48,1,48,5,48,365,8,48,10,48,12,48,368,
		9,48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,
		1,54,1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,
		1,61,1,61,1,182,0,62,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,0,27,0,29,0,31,13,33,14,35,15,37,16,39,17,41,18,43,19,45,20,
		47,21,49,22,51,23,53,24,55,25,57,26,59,27,61,28,63,29,65,30,67,31,69,32,
		71,33,73,34,75,35,77,36,79,37,81,38,83,39,85,40,87,41,89,42,91,43,93,44,
		95,45,97,46,99,47,101,48,103,49,105,50,107,51,109,52,111,53,113,54,115,
		55,117,56,119,57,121,58,123,59,1,0,6,3,0,65,90,95,95,97,122,1,0,48,57,
		2,0,10,10,92,92,6,0,34,34,48,48,101,101,110,110,114,114,116,116,3,0,9,
		10,13,13,32,32,2,0,10,10,13,13,405,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
		0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
		0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,
		0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,
		0,0,121,1,0,0,0,0,123,1,0,0,0,1,125,1,0,0,0,3,127,1,0,0,0,5,129,1,0,0,
		0,7,131,1,0,0,0,9,134,1,0,0,0,11,136,1,0,0,0,13,138,1,0,0,0,15,141,1,0,
		0,0,17,144,1,0,0,0,19,146,1,0,0,0,21,148,1,0,0,0,23,150,1,0,0,0,25,152,
		1,0,0,0,27,154,1,0,0,0,29,159,1,0,0,0,31,161,1,0,0,0,33,165,1,0,0,0,35,
		176,1,0,0,0,37,190,1,0,0,0,39,194,1,0,0,0,41,198,1,0,0,0,43,202,1,0,0,
		0,45,205,1,0,0,0,47,210,1,0,0,0,49,216,1,0,0,0,51,219,1,0,0,0,53,228,1,
		0,0,0,55,234,1,0,0,0,57,240,1,0,0,0,59,245,1,0,0,0,61,252,1,0,0,0,63,261,
		1,0,0,0,65,265,1,0,0,0,67,272,1,0,0,0,69,276,1,0,0,0,71,280,1,0,0,0,73,
		284,1,0,0,0,75,289,1,0,0,0,77,293,1,0,0,0,79,297,1,0,0,0,81,300,1,0,0,
		0,83,305,1,0,0,0,85,311,1,0,0,0,87,318,1,0,0,0,89,321,1,0,0,0,91,327,1,
		0,0,0,93,339,1,0,0,0,95,346,1,0,0,0,97,362,1,0,0,0,99,371,1,0,0,0,101,
		373,1,0,0,0,103,375,1,0,0,0,105,377,1,0,0,0,107,379,1,0,0,0,109,381,1,
		0,0,0,111,383,1,0,0,0,113,386,1,0,0,0,115,388,1,0,0,0,117,390,1,0,0,0,
		119,392,1,0,0,0,121,394,1,0,0,0,123,396,1,0,0,0,125,126,5,46,0,0,126,2,
		1,0,0,0,127,128,5,44,0,0,128,4,1,0,0,0,129,130,5,59,0,0,130,6,1,0,0,0,
		131,132,5,33,0,0,132,133,5,61,0,0,133,8,1,0,0,0,134,135,5,62,0,0,135,10,
		1,0,0,0,136,137,5,60,0,0,137,12,1,0,0,0,138,139,5,60,0,0,139,140,5,61,
		0,0,140,14,1,0,0,0,141,142,5,62,0,0,142,143,5,61,0,0,143,16,1,0,0,0,144,
		145,5,124,0,0,145,18,1,0,0,0,146,147,5,94,0,0,147,20,1,0,0,0,148,149,5,
		126,0,0,149,22,1,0,0,0,150,151,5,39,0,0,151,24,1,0,0,0,152,153,7,0,0,0,
		153,26,1,0,0,0,154,155,7,1,0,0,155,28,1,0,0,0,156,160,8,2,0,0,157,158,
		5,92,0,0,158,160,7,3,0,0,159,156,1,0,0,0,159,157,1,0,0,0,160,30,1,0,0,
		0,161,162,7,4,0,0,162,163,1,0,0,0,163,164,6,15,0,0,164,32,1,0,0,0,165,
		166,5,47,0,0,166,167,5,47,0,0,167,171,1,0,0,0,168,170,8,5,0,0,169,168,
		1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,
		0,173,171,1,0,0,0,174,175,6,16,0,0,175,34,1,0,0,0,176,177,5,47,0,0,177,
		178,5,42,0,0,178,182,1,0,0,0,179,181,9,0,0,0,180,179,1,0,0,0,181,184,1,
		0,0,0,182,183,1,0,0,0,182,180,1,0,0,0,183,185,1,0,0,0,184,182,1,0,0,0,
		185,186,5,42,0,0,186,187,5,47,0,0,187,188,1,0,0,0,188,189,6,17,0,0,189,
		36,1,0,0,0,190,191,5,118,0,0,191,192,5,97,0,0,192,193,5,114,0,0,193,38,
		1,0,0,0,194,195,5,108,0,0,195,196,5,101,0,0,196,197,5,116,0,0,197,40,1,
		0,0,0,198,199,5,101,0,0,199,200,5,110,0,0,200,201,5,100,0,0,201,42,1,0,
		0,0,202,203,5,105,0,0,203,204,5,102,0,0,204,44,1,0,0,0,205,206,5,101,0,
		0,206,207,5,108,0,0,207,208,5,115,0,0,208,209,5,101,0,0,209,46,1,0,0,0,
		210,211,5,119,0,0,211,212,5,104,0,0,212,213,5,105,0,0,213,214,5,108,0,
		0,214,215,5,101,0,0,215,48,1,0,0,0,216,217,5,102,0,0,217,218,5,110,0,0,
		218,50,1,0,0,0,219,220,5,99,0,0,220,221,5,111,0,0,221,222,5,110,0,0,222,
		223,5,116,0,0,223,224,5,105,0,0,224,225,5,110,0,0,225,226,5,117,0,0,226,
		227,5,101,0,0,227,52,1,0,0,0,228,229,5,98,0,0,229,230,5,114,0,0,230,231,
		5,101,0,0,231,232,5,97,0,0,232,233,5,107,0,0,233,54,1,0,0,0,234,235,5,
		100,0,0,235,236,5,101,0,0,236,237,5,102,0,0,237,238,5,101,0,0,238,239,
		5,114,0,0,239,56,1,0,0,0,240,241,5,116,0,0,241,242,5,121,0,0,242,243,5,
		112,0,0,243,244,5,101,0,0,244,58,1,0,0,0,245,246,5,115,0,0,246,247,5,116,
		0,0,247,248,5,114,0,0,248,249,5,117,0,0,249,250,5,99,0,0,250,251,5,116,
		0,0,251,60,1,0,0,0,252,253,5,116,0,0,253,254,5,101,0,0,254,255,5,109,0,
		0,255,256,5,112,0,0,256,257,5,108,0,0,257,258,5,97,0,0,258,259,5,116,0,
		0,259,260,5,101,0,0,260,62,1,0,0,0,261,262,5,110,0,0,262,263,5,101,0,0,
		263,264,5,119,0,0,264,64,1,0,0,0,265,266,5,114,0,0,266,267,5,101,0,0,267,
		268,5,116,0,0,268,269,5,117,0,0,269,270,5,114,0,0,270,271,5,110,0,0,271,
		66,1,0,0,0,272,273,5,102,0,0,273,274,5,111,0,0,274,275,5,114,0,0,275,68,
		1,0,0,0,276,277,5,109,0,0,277,278,5,111,0,0,278,279,5,100,0,0,279,70,1,
		0,0,0,280,281,5,117,0,0,281,282,5,115,0,0,282,283,5,101,0,0,283,72,1,0,
		0,0,284,285,5,97,0,0,285,286,5,117,0,0,286,287,5,116,0,0,287,288,5,111,
		0,0,288,74,1,0,0,0,289,290,5,97,0,0,290,291,5,110,0,0,291,292,5,100,0,
		0,292,76,1,0,0,0,293,294,5,110,0,0,294,295,5,111,0,0,295,296,5,116,0,0,
		296,78,1,0,0,0,297,298,5,111,0,0,298,299,5,114,0,0,299,80,1,0,0,0,300,
		301,5,116,0,0,301,302,5,114,0,0,302,303,5,117,0,0,303,304,5,101,0,0,304,
		82,1,0,0,0,305,306,5,102,0,0,306,307,5,97,0,0,307,308,5,108,0,0,308,309,
		5,115,0,0,309,310,5,101,0,0,310,84,1,0,0,0,311,312,5,117,0,0,312,313,5,
		110,0,0,313,314,5,105,0,0,314,315,5,110,0,0,315,316,5,105,0,0,316,317,
		5,116,0,0,317,86,1,0,0,0,318,319,5,97,0,0,319,320,5,115,0,0,320,88,1,0,
		0,0,321,322,5,99,0,0,322,323,5,97,0,0,323,324,5,115,0,0,324,325,5,116,
		0,0,325,90,1,0,0,0,326,328,3,25,12,0,327,326,1,0,0,0,328,329,1,0,0,0,329,
		327,1,0,0,0,329,330,1,0,0,0,330,335,1,0,0,0,331,334,3,27,13,0,332,334,
		3,25,12,0,333,331,1,0,0,0,333,332,1,0,0,0,334,337,1,0,0,0,335,333,1,0,
		0,0,335,336,1,0,0,0,336,92,1,0,0,0,337,335,1,0,0,0,338,340,3,27,13,0,339,
		338,1,0,0,0,340,341,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,94,1,0,
		0,0,343,345,3,27,13,0,344,343,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,
		346,347,1,0,0,0,347,354,1,0,0,0,348,346,1,0,0,0,349,350,3,27,13,0,350,
		351,5,46,0,0,351,355,1,0,0,0,352,353,5,46,0,0,353,355,3,27,13,0,354,349,
		1,0,0,0,354,352,1,0,0,0,355,359,1,0,0,0,356,358,3,27,13,0,357,356,1,0,
		0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,96,1,0,0,0,361,
		359,1,0,0,0,362,366,5,34,0,0,363,365,3,29,14,0,364,363,1,0,0,0,365,368,
		1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,369,1,0,0,0,368,366,1,0,0,
		0,369,370,5,34,0,0,370,98,1,0,0,0,371,372,5,43,0,0,372,100,1,0,0,0,373,
		374,5,45,0,0,374,102,1,0,0,0,375,376,5,42,0,0,376,104,1,0,0,0,377,378,
		5,47,0,0,378,106,1,0,0,0,379,380,5,38,0,0,380,108,1,0,0,0,381,382,5,61,
		0,0,382,110,1,0,0,0,383,384,5,61,0,0,384,385,5,61,0,0,385,112,1,0,0,0,
		386,387,5,40,0,0,387,114,1,0,0,0,388,389,5,41,0,0,389,116,1,0,0,0,390,
		391,5,123,0,0,391,118,1,0,0,0,392,393,5,125,0,0,393,120,1,0,0,0,394,395,
		5,91,0,0,395,122,1,0,0,0,396,397,5,93,0,0,397,124,1,0,0,0,12,0,159,171,
		182,329,333,335,341,346,354,359,366,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
