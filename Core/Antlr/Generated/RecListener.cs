//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from source/Antlr/Rec.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="RecParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IRecListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] RecParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] RecParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.topLevelStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTopLevelStatement([NotNull] RecParser.TopLevelStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.topLevelStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTopLevelStatement([NotNull] RecParser.TopLevelStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.asStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAsStatement([NotNull] RecParser.AsStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.asStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAsStatement([NotNull] RecParser.AsStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.simpleScopedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleScopedIdentifier([NotNull] RecParser.SimpleScopedIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.simpleScopedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleScopedIdentifier([NotNull] RecParser.SimpleScopedIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.modStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModStatement([NotNull] RecParser.ModStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.modStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModStatement([NotNull] RecParser.ModStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.useStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUseStatement([NotNull] RecParser.UseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.useStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUseStatement([NotNull] RecParser.UseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.templateHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplateHeader([NotNull] RecParser.TemplateHeaderContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.templateHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplateHeader([NotNull] RecParser.TemplateHeaderContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.structFieldDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructFieldDefine([NotNull] RecParser.StructFieldDefineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.structFieldDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructFieldDefine([NotNull] RecParser.StructFieldDefineContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.structDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructDefine([NotNull] RecParser.StructDefineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.structDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructDefine([NotNull] RecParser.StructDefineContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.fnArgumentDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFnArgumentDefine([NotNull] RecParser.FnArgumentDefineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.fnArgumentDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFnArgumentDefine([NotNull] RecParser.FnArgumentDefineContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.fnDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFnDefine([NotNull] RecParser.FnDefineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.fnDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFnDefine([NotNull] RecParser.FnDefineContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.aliasDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAliasDefine([NotNull] RecParser.AliasDefineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.aliasDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAliasDefine([NotNull] RecParser.AliasDefineContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] RecParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] RecParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] RecParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] RecParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueStatement([NotNull] RecParser.ContinueStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueStatement([NotNull] RecParser.ContinueStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] RecParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] RecParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] RecParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] RecParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.deferStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeferStatement([NotNull] RecParser.DeferStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.deferStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeferStatement([NotNull] RecParser.DeferStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] RecParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] RecParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ElseStatement</c>
	/// labeled alternative in <see cref="RecParser.ifTail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseStatement([NotNull] RecParser.ElseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ElseStatement</c>
	/// labeled alternative in <see cref="RecParser.ifTail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseStatement([NotNull] RecParser.ElseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ElifStatement</c>
	/// labeled alternative in <see cref="RecParser.ifTail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElifStatement([NotNull] RecParser.ElifStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ElifStatement</c>
	/// labeled alternative in <see cref="RecParser.ifTail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElifStatement([NotNull] RecParser.ElifStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] RecParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] RecParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.assignStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignStatement([NotNull] RecParser.AssignStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.assignStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignStatement([NotNull] RecParser.AssignStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.letStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLetStatement([NotNull] RecParser.LetStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.letStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLetStatement([NotNull] RecParser.LetStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.typenameFnArgs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypenameFnArgs([NotNull] RecParser.TypenameFnArgsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.typenameFnArgs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypenameFnArgs([NotNull] RecParser.TypenameFnArgsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypenameSingle</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypenameSingle([NotNull] RecParser.TypenameSingleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypenameSingle</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypenameSingle([NotNull] RecParser.TypenameSingleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypenameWrapped</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypenameWrapped([NotNull] RecParser.TypenameWrappedContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypenameWrapped</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypenameWrapped([NotNull] RecParser.TypenameWrappedContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypenameGeneric</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypenameGeneric([NotNull] RecParser.TypenameGenericContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypenameGeneric</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypenameGeneric([NotNull] RecParser.TypenameGenericContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypenamePointer</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypenamePointer([NotNull] RecParser.TypenamePointerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypenamePointer</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypenamePointer([NotNull] RecParser.TypenamePointerContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypenameArray</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypenameArray([NotNull] RecParser.TypenameArrayContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypenameArray</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypenameArray([NotNull] RecParser.TypenameArrayContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypenameFn</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypenameFn([NotNull] RecParser.TypenameFnContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypenameFn</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypenameFn([NotNull] RecParser.TypenameFnContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AndOperator</c>
	/// labeled alternative in <see cref="RecParser.logicalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndOperator([NotNull] RecParser.AndOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AndOperator</c>
	/// labeled alternative in <see cref="RecParser.logicalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndOperator([NotNull] RecParser.AndOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OrOperator</c>
	/// labeled alternative in <see cref="RecParser.logicalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrOperator([NotNull] RecParser.OrOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OrOperator</c>
	/// labeled alternative in <see cref="RecParser.logicalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrOperator([NotNull] RecParser.OrOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualsOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualsOperator([NotNull] RecParser.EqualsOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualsOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualsOperator([NotNull] RecParser.EqualsOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotEqualsOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotEqualsOperator([NotNull] RecParser.NotEqualsOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotEqualsOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotEqualsOperator([NotNull] RecParser.NotEqualsOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanOperator([NotNull] RecParser.GreaterThanOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanOperator([NotNull] RecParser.GreaterThanOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanOperator([NotNull] RecParser.LessThanOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanOperator([NotNull] RecParser.LessThanOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterEqualOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterEqualOperator([NotNull] RecParser.GreaterEqualOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterEqualOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterEqualOperator([NotNull] RecParser.GreaterEqualOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LessEqualOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessEqualOperator([NotNull] RecParser.LessEqualOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LessEqualOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessEqualOperator([NotNull] RecParser.LessEqualOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MulOperator</c>
	/// labeled alternative in <see cref="RecParser.muldivOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulOperator([NotNull] RecParser.MulOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MulOperator</c>
	/// labeled alternative in <see cref="RecParser.muldivOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulOperator([NotNull] RecParser.MulOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DivOperator</c>
	/// labeled alternative in <see cref="RecParser.muldivOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivOperator([NotNull] RecParser.DivOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DivOperator</c>
	/// labeled alternative in <see cref="RecParser.muldivOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivOperator([NotNull] RecParser.DivOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitAndOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitAndOperator([NotNull] RecParser.BitAndOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitAndOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitAndOperator([NotNull] RecParser.BitAndOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitOrOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitOrOperator([NotNull] RecParser.BitOrOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitOrOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitOrOperator([NotNull] RecParser.BitOrOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitXorOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitXorOperator([NotNull] RecParser.BitXorOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitXorOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitXorOperator([NotNull] RecParser.BitXorOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitShiftLeftOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitShiftLeftOperator([NotNull] RecParser.BitShiftLeftOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitShiftLeftOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitShiftLeftOperator([NotNull] RecParser.BitShiftLeftOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitShiftRightOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitShiftRightOperator([NotNull] RecParser.BitShiftRightOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitShiftRightOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitShiftRightOperator([NotNull] RecParser.BitShiftRightOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddOperator</c>
	/// labeled alternative in <see cref="RecParser.addsubOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddOperator([NotNull] RecParser.AddOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddOperator</c>
	/// labeled alternative in <see cref="RecParser.addsubOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddOperator([NotNull] RecParser.AddOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SubOperator</c>
	/// labeled alternative in <see cref="RecParser.addsubOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubOperator([NotNull] RecParser.SubOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SubOperator</c>
	/// labeled alternative in <see cref="RecParser.addsubOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubOperator([NotNull] RecParser.SubOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PositOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPositOperator([NotNull] RecParser.PositOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PositOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPositOperator([NotNull] RecParser.PositOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NegateOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegateOperator([NotNull] RecParser.NegateOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NegateOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegateOperator([NotNull] RecParser.NegateOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitNotOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitNotOperator([NotNull] RecParser.BitNotOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitNotOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitNotOperator([NotNull] RecParser.BitNotOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DereferenceOperator</c>
	/// labeled alternative in <see cref="RecParser.memoryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDereferenceOperator([NotNull] RecParser.DereferenceOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DereferenceOperator</c>
	/// labeled alternative in <see cref="RecParser.memoryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDereferenceOperator([NotNull] RecParser.DereferenceOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddressofOperator</c>
	/// labeled alternative in <see cref="RecParser.memoryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddressofOperator([NotNull] RecParser.AddressofOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddressofOperator</c>
	/// labeled alternative in <see cref="RecParser.memoryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddressofOperator([NotNull] RecParser.AddressofOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DotExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDotExpression([NotNull] RecParser.DotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DotExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDotExpression([NotNull] RecParser.DotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TermExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTermExpression([NotNull] RecParser.TermExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TermExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTermExpression([NotNull] RecParser.TermExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryExpression([NotNull] RecParser.BinaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryExpression([NotNull] RecParser.BinaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemoryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemoryExpression([NotNull] RecParser.MemoryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemoryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemoryExpression([NotNull] RecParser.MemoryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryExpression([NotNull] RecParser.UnaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryExpression([NotNull] RecParser.UnaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCastExpression([NotNull] RecParser.CastExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCastExpression([NotNull] RecParser.CastExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CallExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallExpression([NotNull] RecParser.CallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CallExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallExpression([NotNull] RecParser.CallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.templateInstantiation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplateInstantiation([NotNull] RecParser.TemplateInstantiationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.templateInstantiation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplateInstantiation([NotNull] RecParser.TemplateInstantiationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.structExprAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructExprAssign([NotNull] RecParser.StructExprAssignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.structExprAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructExprAssign([NotNull] RecParser.StructExprAssignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.structExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructExpression([NotNull] RecParser.StructExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.structExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructExpression([NotNull] RecParser.StructExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.dotComponent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDotComponent([NotNull] RecParser.DotComponentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.dotComponent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDotComponent([NotNull] RecParser.DotComponentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.variableReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableReference([NotNull] RecParser.VariableReferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.variableReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableReference([NotNull] RecParser.VariableReferenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] RecParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] RecParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerLiteral([NotNull] RecParser.IntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerLiteral([NotNull] RecParser.IntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FloatLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloatLiteral([NotNull] RecParser.FloatLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FloatLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloatLiteral([NotNull] RecParser.FloatLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StringLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringLiteral([NotNull] RecParser.StringLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StringLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringLiteral([NotNull] RecParser.StringLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BoolLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolLiteral([NotNull] RecParser.BoolLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolLiteral([NotNull] RecParser.BoolLiteralContext context);
}
