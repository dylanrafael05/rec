//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from source/Antlr/Rec.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IRecListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class RecBaseListener : IRecListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] RecParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] RecParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.topLevelStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTopLevelStatement([NotNull] RecParser.TopLevelStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.topLevelStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTopLevelStatement([NotNull] RecParser.TopLevelStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.asStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAsStatement([NotNull] RecParser.AsStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.asStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAsStatement([NotNull] RecParser.AsStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.simpleScopedIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleScopedIdentifier([NotNull] RecParser.SimpleScopedIdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.simpleScopedIdentifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleScopedIdentifier([NotNull] RecParser.SimpleScopedIdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.modStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModStatement([NotNull] RecParser.ModStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.modStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModStatement([NotNull] RecParser.ModStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.useStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUseStatement([NotNull] RecParser.UseStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.useStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUseStatement([NotNull] RecParser.UseStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.templateHeader"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTemplateHeader([NotNull] RecParser.TemplateHeaderContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.templateHeader"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTemplateHeader([NotNull] RecParser.TemplateHeaderContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.structFieldDefine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructFieldDefine([NotNull] RecParser.StructFieldDefineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.structFieldDefine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructFieldDefine([NotNull] RecParser.StructFieldDefineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.structDefine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructDefine([NotNull] RecParser.StructDefineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.structDefine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructDefine([NotNull] RecParser.StructDefineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.fnArgumentDefine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFnArgumentDefine([NotNull] RecParser.FnArgumentDefineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.fnArgumentDefine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFnArgumentDefine([NotNull] RecParser.FnArgumentDefineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.fnDefine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFnDefine([NotNull] RecParser.FnDefineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.fnDefine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFnDefine([NotNull] RecParser.FnDefineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.aliasDefine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAliasDefine([NotNull] RecParser.AliasDefineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.aliasDefine"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAliasDefine([NotNull] RecParser.AliasDefineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] RecParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] RecParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] RecParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] RecParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.continueStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContinueStatement([NotNull] RecParser.ContinueStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.continueStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContinueStatement([NotNull] RecParser.ContinueStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.breakStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBreakStatement([NotNull] RecParser.BreakStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.breakStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBreakStatement([NotNull] RecParser.BreakStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.returnStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] RecParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.returnStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] RecParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.deferStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeferStatement([NotNull] RecParser.DeferStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.deferStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeferStatement([NotNull] RecParser.DeferStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] RecParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] RecParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ElseStatement</c>
	/// labeled alternative in <see cref="RecParser.ifTail"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElseStatement([NotNull] RecParser.ElseStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ElseStatement</c>
	/// labeled alternative in <see cref="RecParser.ifTail"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElseStatement([NotNull] RecParser.ElseStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ElifStatement</c>
	/// labeled alternative in <see cref="RecParser.ifTail"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElifStatement([NotNull] RecParser.ElifStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ElifStatement</c>
	/// labeled alternative in <see cref="RecParser.ifTail"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElifStatement([NotNull] RecParser.ElifStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] RecParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] RecParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.assignStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignStatement([NotNull] RecParser.AssignStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.assignStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignStatement([NotNull] RecParser.AssignStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.letStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLetStatement([NotNull] RecParser.LetStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.letStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLetStatement([NotNull] RecParser.LetStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.typenameFnArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypenameFnArgs([NotNull] RecParser.TypenameFnArgsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.typenameFnArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypenameFnArgs([NotNull] RecParser.TypenameFnArgsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypenameSingle</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypenameSingle([NotNull] RecParser.TypenameSingleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypenameSingle</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypenameSingle([NotNull] RecParser.TypenameSingleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypenameWrapped</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypenameWrapped([NotNull] RecParser.TypenameWrappedContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypenameWrapped</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypenameWrapped([NotNull] RecParser.TypenameWrappedContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypenameGeneric</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypenameGeneric([NotNull] RecParser.TypenameGenericContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypenameGeneric</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypenameGeneric([NotNull] RecParser.TypenameGenericContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypenamePointer</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypenamePointer([NotNull] RecParser.TypenamePointerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypenamePointer</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypenamePointer([NotNull] RecParser.TypenamePointerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypenameArray</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypenameArray([NotNull] RecParser.TypenameArrayContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypenameArray</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypenameArray([NotNull] RecParser.TypenameArrayContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypenameFn</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypenameFn([NotNull] RecParser.TypenameFnContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypenameFn</c>
	/// labeled alternative in <see cref="RecParser.typename"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypenameFn([NotNull] RecParser.TypenameFnContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AndOperator</c>
	/// labeled alternative in <see cref="RecParser.logicalOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAndOperator([NotNull] RecParser.AndOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AndOperator</c>
	/// labeled alternative in <see cref="RecParser.logicalOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAndOperator([NotNull] RecParser.AndOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OrOperator</c>
	/// labeled alternative in <see cref="RecParser.logicalOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrOperator([NotNull] RecParser.OrOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OrOperator</c>
	/// labeled alternative in <see cref="RecParser.logicalOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrOperator([NotNull] RecParser.OrOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualsOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqualsOperator([NotNull] RecParser.EqualsOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualsOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqualsOperator([NotNull] RecParser.EqualsOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NotEqualsOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotEqualsOperator([NotNull] RecParser.NotEqualsOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NotEqualsOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotEqualsOperator([NotNull] RecParser.NotEqualsOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterThanOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterThanOperator([NotNull] RecParser.GreaterThanOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterThanOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterThanOperator([NotNull] RecParser.GreaterThanOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LessThanOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessThanOperator([NotNull] RecParser.LessThanOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LessThanOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessThanOperator([NotNull] RecParser.LessThanOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GreaterEqualOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGreaterEqualOperator([NotNull] RecParser.GreaterEqualOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GreaterEqualOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGreaterEqualOperator([NotNull] RecParser.GreaterEqualOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LessEqualOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLessEqualOperator([NotNull] RecParser.LessEqualOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LessEqualOperator</c>
	/// labeled alternative in <see cref="RecParser.compOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLessEqualOperator([NotNull] RecParser.LessEqualOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MulOperator</c>
	/// labeled alternative in <see cref="RecParser.muldivOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMulOperator([NotNull] RecParser.MulOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MulOperator</c>
	/// labeled alternative in <see cref="RecParser.muldivOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMulOperator([NotNull] RecParser.MulOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DivOperator</c>
	/// labeled alternative in <see cref="RecParser.muldivOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivOperator([NotNull] RecParser.DivOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DivOperator</c>
	/// labeled alternative in <see cref="RecParser.muldivOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivOperator([NotNull] RecParser.DivOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitAndOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitAndOperator([NotNull] RecParser.BitAndOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitAndOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitAndOperator([NotNull] RecParser.BitAndOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitOrOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitOrOperator([NotNull] RecParser.BitOrOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitOrOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitOrOperator([NotNull] RecParser.BitOrOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitXorOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitXorOperator([NotNull] RecParser.BitXorOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitXorOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitXorOperator([NotNull] RecParser.BitXorOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitShiftLeftOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitShiftLeftOperator([NotNull] RecParser.BitShiftLeftOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitShiftLeftOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitShiftLeftOperator([NotNull] RecParser.BitShiftLeftOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitShiftRightOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitShiftRightOperator([NotNull] RecParser.BitShiftRightOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitShiftRightOperator</c>
	/// labeled alternative in <see cref="RecParser.bitwiseOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitShiftRightOperator([NotNull] RecParser.BitShiftRightOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AddOperator</c>
	/// labeled alternative in <see cref="RecParser.addsubOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddOperator([NotNull] RecParser.AddOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AddOperator</c>
	/// labeled alternative in <see cref="RecParser.addsubOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddOperator([NotNull] RecParser.AddOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubOperator</c>
	/// labeled alternative in <see cref="RecParser.addsubOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubOperator([NotNull] RecParser.SubOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubOperator</c>
	/// labeled alternative in <see cref="RecParser.addsubOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubOperator([NotNull] RecParser.SubOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PositOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPositOperator([NotNull] RecParser.PositOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PositOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPositOperator([NotNull] RecParser.PositOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NegateOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegateOperator([NotNull] RecParser.NegateOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NegateOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegateOperator([NotNull] RecParser.NegateOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitNotOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitNotOperator([NotNull] RecParser.BitNotOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitNotOperator</c>
	/// labeled alternative in <see cref="RecParser.unaryOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitNotOperator([NotNull] RecParser.BitNotOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DereferenceOperator</c>
	/// labeled alternative in <see cref="RecParser.memoryOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDereferenceOperator([NotNull] RecParser.DereferenceOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DereferenceOperator</c>
	/// labeled alternative in <see cref="RecParser.memoryOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDereferenceOperator([NotNull] RecParser.DereferenceOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AddressofOperator</c>
	/// labeled alternative in <see cref="RecParser.memoryOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddressofOperator([NotNull] RecParser.AddressofOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AddressofOperator</c>
	/// labeled alternative in <see cref="RecParser.memoryOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddressofOperator([NotNull] RecParser.AddressofOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DotExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDotExpression([NotNull] RecParser.DotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DotExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDotExpression([NotNull] RecParser.DotExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TermExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTermExpression([NotNull] RecParser.TermExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TermExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTermExpression([NotNull] RecParser.TermExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryExpression([NotNull] RecParser.BinaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryExpression([NotNull] RecParser.BinaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MemoryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemoryExpression([NotNull] RecParser.MemoryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MemoryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemoryExpression([NotNull] RecParser.MemoryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryExpression([NotNull] RecParser.UnaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryExpression([NotNull] RecParser.UnaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCastExpression([NotNull] RecParser.CastExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CastExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCastExpression([NotNull] RecParser.CastExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CallExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCallExpression([NotNull] RecParser.CallExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CallExpression</c>
	/// labeled alternative in <see cref="RecParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCallExpression([NotNull] RecParser.CallExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.templateInstantiation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTemplateInstantiation([NotNull] RecParser.TemplateInstantiationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.templateInstantiation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTemplateInstantiation([NotNull] RecParser.TemplateInstantiationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.structExprAssign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructExprAssign([NotNull] RecParser.StructExprAssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.structExprAssign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructExprAssign([NotNull] RecParser.StructExprAssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.structExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructExpression([NotNull] RecParser.StructExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.structExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructExpression([NotNull] RecParser.StructExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.dotComponent"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDotComponent([NotNull] RecParser.DotComponentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.dotComponent"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDotComponent([NotNull] RecParser.DotComponentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.variableReference"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableReference([NotNull] RecParser.VariableReferenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.variableReference"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableReference([NotNull] RecParser.VariableReferenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RecParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] RecParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RecParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] RecParser.TermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntegerLiteral([NotNull] RecParser.IntegerLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntegerLiteral([NotNull] RecParser.IntegerLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FloatLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloatLiteral([NotNull] RecParser.FloatLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FloatLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloatLiteral([NotNull] RecParser.FloatLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StringLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringLiteral([NotNull] RecParser.StringLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StringLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringLiteral([NotNull] RecParser.StringLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BoolLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolLiteral([NotNull] RecParser.BoolLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BoolLiteral</c>
	/// labeled alternative in <see cref="RecParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolLiteral([NotNull] RecParser.BoolLiteralContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
