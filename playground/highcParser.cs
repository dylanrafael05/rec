//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from highc.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class highcParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, Whitespace=14, SLComment=15, MLComment=16, 
		Var=17, Let=18, If=19, Else=20, While=21, Fn=22, Continue=23, Break=24, 
		Defer=25, Type=26, Struct=27, Template=28, New=29, Return=30, For=31, 
		Mod=32, Use=33, Auto=34, And=35, Not=36, Or=37, True=38, False=39, Uninit=40, 
		Identifier=41, Integer=42, Float=43, String=44, Plus=45, Minus=46, Star=47, 
		Slash=48, Ampersand=49, Equal=50, CompEqual=51, OpenParen=52, CloseParen=53, 
		OpenBrace=54, CloseBrace=55, OpenIndex=56, CloseIndex=57;
	public const int
		RULE_program = 0, RULE_top_level_statement = 1, RULE_mod_statement = 2, 
		RULE_use_statement = 3, RULE_template_header = 4, RULE_struct_define_field = 5, 
		RULE_struct_define = 6, RULE_fn_define_argument = 7, RULE_fn_define = 8, 
		RULE_alias_define = 9, RULE_block = 10, RULE_statement = 11, RULE_return_statement = 12, 
		RULE_defer_statement = 13, RULE_if_statement = 14, RULE_if_tail_statement = 15, 
		RULE_while_statement = 16, RULE_assign_statement = 17, RULE_let_expression = 18, 
		RULE_let_statement = 19, RULE_typename_fn_args = 20, RULE_typename = 21, 
		RULE_expression = 22, RULE_op_expression = 23, RULE_explicit_template_instantiation = 24, 
		RULE_call_expression = 25, RULE_struct_expression = 26, RULE_struct_expression_set = 27, 
		RULE_dot_expression = 28, RULE_term_expression = 29, RULE_literal = 30, 
		RULE_boolean_literal = 31;
	public static readonly string[] ruleNames = {
		"program", "top_level_statement", "mod_statement", "use_statement", "template_header", 
		"struct_define_field", "struct_define", "fn_define_argument", "fn_define", 
		"alias_define", "block", "statement", "return_statement", "defer_statement", 
		"if_statement", "if_tail_statement", "while_statement", "assign_statement", 
		"let_expression", "let_statement", "typename_fn_args", "typename", "expression", 
		"op_expression", "explicit_template_instantiation", "call_expression", 
		"struct_expression", "struct_expression_set", "dot_expression", "term_expression", 
		"literal", "boolean_literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','", "'''", "';'", "'!='", "'>'", "'<'", "'<='", "'>='", 
		"'|'", "'>>'", "'<<'", "'~'", null, null, null, "'var'", "'let'", "'if'", 
		"'else'", "'while'", "'fn'", "'continue'", "'break'", "'defer'", "'type'", 
		"'struct'", "'template'", "'new'", "'return'", "'for'", "'mod'", "'use'", 
		"'auto'", "'and'", "'not'", "'or'", "'true'", "'false'", "'uninit'", null, 
		null, null, null, "'+'", "'-'", "'*'", "'/'", "'&'", "'='", "'=='", "'('", 
		"')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "Whitespace", "SLComment", "MLComment", "Var", "Let", "If", 
		"Else", "While", "Fn", "Continue", "Break", "Defer", "Type", "Struct", 
		"Template", "New", "Return", "For", "Mod", "Use", "Auto", "And", "Not", 
		"Or", "True", "False", "Uninit", "Identifier", "Integer", "Float", "String", 
		"Plus", "Minus", "Star", "Slash", "Ampersand", "Equal", "CompEqual", "OpenParen", 
		"CloseParen", "OpenBrace", "CloseBrace", "OpenIndex", "CloseIndex"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "highc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static highcParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public highcParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public highcParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext[] top_level_statement() {
			return GetRuleContexts<Top_level_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_statementContext top_level_statement(int i) {
			return GetRuleContext<Top_level_statementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13359251456L) != 0)) {
				{
				{
				State = 64;
				top_level_statement();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fn_defineContext fn_define() {
			return GetRuleContext<Fn_defineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_defineContext struct_define() {
			return GetRuleContext<Struct_defineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_defineContext alias_define() {
			return GetRuleContext<Alias_defineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Let_statementContext let_statement() {
			return GetRuleContext<Let_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mod_statementContext mod_statement() {
			return GetRuleContext<Mod_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_statementContext use_statement() {
			return GetRuleContext<Use_statementContext>(0);
		}
		public Top_level_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterTop_level_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitTop_level_statement(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_statementContext top_level_statement() {
		Top_level_statementContext _localctx = new Top_level_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_top_level_statement);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				fn_define();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				struct_define();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72;
				alias_define();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 73;
				let_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 74;
				mod_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 75;
				use_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mod_statementContext : ParserRuleContext {
		public IToken _Identifier;
		public IList<IToken> _parts = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(highcParser.Mod, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(highcParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(highcParser.Identifier, i);
		}
		public Mod_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterMod_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitMod_statement(this);
		}
	}

	[RuleVersion(0)]
	public Mod_statementContext mod_statement() {
		Mod_statementContext _localctx = new Mod_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_mod_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(Mod);
			{
			State = 79;
			_localctx._Identifier = Match(Identifier);
			_localctx._parts.Add(_localctx._Identifier);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 80;
				Match(T__0);
				State = 81;
				_localctx._Identifier = Match(Identifier);
				_localctx._parts.Add(_localctx._Identifier);
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_statementContext : ParserRuleContext {
		public IToken _Identifier;
		public IList<IToken> _parts = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Use() { return GetToken(highcParser.Use, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(highcParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(highcParser.Identifier, i);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterUse_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitUse_statement(this);
		}
	}

	[RuleVersion(0)]
	public Use_statementContext use_statement() {
		Use_statementContext _localctx = new Use_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_use_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(Use);
			{
			State = 88;
			_localctx._Identifier = Match(Identifier);
			_localctx._parts.Add(_localctx._Identifier);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 89;
				Match(T__0);
				State = 90;
				_localctx._Identifier = Match(Identifier);
				_localctx._parts.Add(_localctx._Identifier);
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_headerContext : ParserRuleContext {
		public IToken _Identifier;
		public IList<IToken> _args = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Template() { return GetToken(highcParser.Template, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(highcParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(highcParser.Identifier, i);
		}
		public Template_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterTemplate_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitTemplate_header(this);
		}
	}

	[RuleVersion(0)]
	public Template_headerContext template_header() {
		Template_headerContext _localctx = new Template_headerContext(Context, State);
		EnterRule(_localctx, 8, RULE_template_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(Template);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 97;
				_localctx._Identifier = Match(Identifier);
				_localctx._args.Add(_localctx._Identifier);
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_define_fieldContext : ParserRuleContext {
		public IToken name;
		public TypenameContext type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(highcParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(highcParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public Struct_define_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_define_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterStruct_define_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitStruct_define_field(this);
		}
	}

	[RuleVersion(0)]
	public Struct_define_fieldContext struct_define_field() {
		Struct_define_fieldContext _localctx = new Struct_define_fieldContext(Context, State);
		EnterRule(_localctx, 10, RULE_struct_define_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(Let);
			State = 103;
			_localctx.name = Match(Identifier);
			State = 104;
			_localctx.type = typename(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_defineContext : ParserRuleContext {
		public IToken name;
		public Struct_define_fieldContext _struct_define_field;
		public IList<Struct_define_fieldContext> _fields = new List<Struct_define_fieldContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(highcParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(highcParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(highcParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(highcParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Template_headerContext template_header() {
			return GetRuleContext<Template_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_define_fieldContext[] struct_define_field() {
			return GetRuleContexts<Struct_define_fieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_define_fieldContext struct_define_field(int i) {
			return GetRuleContext<Struct_define_fieldContext>(i);
		}
		public Struct_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterStruct_define(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitStruct_define(this);
		}
	}

	[RuleVersion(0)]
	public Struct_defineContext struct_define() {
		Struct_defineContext _localctx = new Struct_defineContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct_define);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 106;
				template_header();
				}
			}

			State = 109;
			Match(Struct);
			State = 110;
			_localctx.name = Match(Identifier);
			State = 111;
			Match(OpenBrace);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Let) {
				{
				{
				State = 112;
				_localctx._struct_define_field = struct_define_field();
				_localctx._fields.Add(_localctx._struct_define_field);
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 118;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_define_argumentContext : ParserRuleContext {
		public IToken auto;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(highcParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Auto() { return GetToken(highcParser.Auto, 0); }
		public Fn_define_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_define_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterFn_define_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitFn_define_argument(this);
		}
	}

	[RuleVersion(0)]
	public Fn_define_argumentContext fn_define_argument() {
		Fn_define_argumentContext _localctx = new Fn_define_argumentContext(Context, State);
		EnterRule(_localctx, 14, RULE_fn_define_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Auto) {
				{
				State = 120;
				_localctx.auto = Match(Auto);
				}
			}

			State = 123;
			Match(Identifier);
			State = 124;
			typename(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_defineContext : ParserRuleContext {
		public IToken name;
		public Fn_define_argumentContext _fn_define_argument;
		public IList<Fn_define_argumentContext> _args = new List<Fn_define_argumentContext>();
		public TypenameContext ret;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fn() { return GetToken(highcParser.Fn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(highcParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(highcParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(highcParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Template_headerContext template_header() {
			return GetRuleContext<Template_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_define_argumentContext[] fn_define_argument() {
			return GetRuleContexts<Fn_define_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_define_argumentContext fn_define_argument(int i) {
			return GetRuleContext<Fn_define_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public Fn_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterFn_define(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitFn_define(this);
		}
	}

	[RuleVersion(0)]
	public Fn_defineContext fn_define() {
		Fn_defineContext _localctx = new Fn_defineContext(Context, State);
		EnterRule(_localctx, 16, RULE_fn_define);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 126;
				template_header();
				}
			}

			State = 129;
			Match(Fn);
			State = 130;
			_localctx.name = Match(Identifier);
			State = 131;
			Match(OpenParen);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Auto || _la==Identifier) {
				{
				State = 132;
				_localctx._fn_define_argument = fn_define_argument();
				_localctx._args.Add(_localctx._fn_define_argument);
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 133;
					Match(T__1);
					State = 134;
					_localctx._fn_define_argument = fn_define_argument();
					_localctx._args.Add(_localctx._fn_define_argument);
					}
					}
					State = 139;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 142;
			Match(CloseParen);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76704130181103616L) != 0)) {
				{
				State = 143;
				_localctx.ret = typename(0);
				}
			}

			State = 146;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_defineContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(highcParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(highcParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(highcParser.Identifier, 0); }
		public Alias_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterAlias_define(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitAlias_define(this);
		}
	}

	[RuleVersion(0)]
	public Alias_defineContext alias_define() {
		Alias_defineContext _localctx = new Alias_defineContext(Context, State);
		EnterRule(_localctx, 18, RULE_alias_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(Type);
			State = 149;
			_localctx.name = Match(Identifier);
			State = 150;
			Match(Equal);
			State = 151;
			typename(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _stmts = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(highcParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(highcParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(OpenBrace);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 22657431627505664L) != 0)) {
				{
				{
				State = 154;
				_localctx._statement = statement();
				_localctx._stmts.Add(_localctx._statement);
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 160;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_statementContext assign_statement() {
			return GetRuleContext<Assign_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Let_statementContext let_statement() {
			return GetRuleContext<Let_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Defer_statementContext defer_statement() {
			return GetRuleContext<Defer_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(highcParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(highcParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162;
				assign_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163;
				let_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 164;
				if_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 165;
				while_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 166;
				defer_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 167;
				return_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 168;
				Match(Continue);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 169;
				Match(Break);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 170;
				block();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 171;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(highcParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(Return);
			State = 175;
			_localctx.value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defer_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Defer() { return GetToken(highcParser.Defer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Defer_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defer_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterDefer_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitDefer_statement(this);
		}
	}

	[RuleVersion(0)]
	public Defer_statementContext defer_statement() {
		Defer_statementContext _localctx = new Defer_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_defer_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(Defer);
			State = 178;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(highcParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_tail_statementContext if_tail_statement() {
			return GetRuleContext<If_tail_statementContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(If);
			State = 181;
			_localctx.cond = expression();
			State = 182;
			block();
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 183;
				if_tail_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_tail_statementContext : ParserRuleContext {
		public BlockContext end_block;
		public If_statementContext elif;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(highcParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public If_tail_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_tail_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterIf_tail_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitIf_tail_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_tail_statementContext if_tail_statement() {
		If_tail_statementContext _localctx = new If_tail_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_if_tail_statement);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186;
				Match(Else);
				State = 187;
				_localctx.end_block = block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188;
				Match(Else);
				State = 189;
				_localctx.elif = if_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ExpressionContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(highcParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(While);
			State = 193;
			_localctx.cond = expression();
			State = 194;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_statementContext : ParserRuleContext {
		public ExpressionContext target;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(highcParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Assign_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterAssign_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitAssign_statement(this);
		}
	}

	[RuleVersion(0)]
	public Assign_statementContext assign_statement() {
		Assign_statementContext _localctx = new Assign_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_assign_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_localctx.target = expression();
			State = 197;
			Match(Equal);
			State = 198;
			_localctx.value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uninit() { return GetToken(highcParser.Uninit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Let_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterLet_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitLet_expression(this);
		}
	}

	[RuleVersion(0)]
	public Let_expressionContext let_expression() {
		Let_expressionContext _localctx = new Let_expressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_let_expression);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Uninit:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				Match(Uninit);
				}
				break;
			case T__12:
			case New:
			case Not:
			case True:
			case False:
			case Identifier:
			case Integer:
			case Float:
			case String:
			case Plus:
			case Minus:
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_statementContext : ParserRuleContext {
		public IToken spec;
		public IToken target;
		public TypenameContext type;
		public Let_expressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(highcParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(highcParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Let_expressionContext let_expression() {
			return GetRuleContext<Let_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(highcParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(highcParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public Let_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterLet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitLet_statement(this);
		}
	}

	[RuleVersion(0)]
	public Let_statementContext let_statement() {
		Let_statementContext _localctx = new Let_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_let_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_localctx.spec = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==Var || _la==Let) ) {
				_localctx.spec = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 205;
			_localctx.target = Match(Identifier);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76704130181103616L) != 0)) {
				{
				State = 206;
				_localctx.type = typename(0);
				}
			}

			State = 209;
			Match(Equal);
			State = 210;
			_localctx.value = let_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typename_fn_argsContext : ParserRuleContext {
		public TypenameContext type;
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(highcParser.Identifier, 0); }
		public Typename_fn_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename_fn_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterTypename_fn_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitTypename_fn_args(this);
		}
	}

	[RuleVersion(0)]
	public Typename_fn_argsContext typename_fn_args() {
		Typename_fn_argsContext _localctx = new Typename_fn_argsContext(Context, State);
		EnterRule(_localctx, 40, RULE_typename_fn_args);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 212;
				Match(Identifier);
				}
				break;
			}
			State = 215;
			_localctx.type = typename(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
	 
		public TypenameContext() { }
		public virtual void CopyFrom(TypenameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypenameManyContext : TypenameContext {
		public IToken _Identifier;
		public IList<IToken> _parts = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(highcParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(highcParser.Identifier, i);
		}
		public TypenameManyContext(TypenameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterTypenameMany(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitTypenameMany(this);
		}
	}
	public partial class TypenameGenericContext : TypenameContext {
		public TypenameContext @base;
		public TypenameContext _typename;
		public IList<TypenameContext> _args = new List<TypenameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		public TypenameGenericContext(TypenameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterTypenameGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitTypenameGeneric(this);
		}
	}
	public partial class TypenameFnContext : TypenameContext {
		public Typename_fn_argsContext _typename_fn_args;
		public IList<Typename_fn_argsContext> _args = new List<Typename_fn_argsContext>();
		public TypenameContext ret;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fn() { return GetToken(highcParser.Fn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(highcParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(highcParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Typename_fn_argsContext[] typename_fn_args() {
			return GetRuleContexts<Typename_fn_argsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typename_fn_argsContext typename_fn_args(int i) {
			return GetRuleContext<Typename_fn_argsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypenameFnContext(TypenameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterTypenameFn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitTypenameFn(this);
		}
	}
	public partial class TypenameArrayContext : TypenameContext {
		public TypenameContext @base;
		public IToken count;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenIndex() { return GetToken(highcParser.OpenIndex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseIndex() { return GetToken(highcParser.CloseIndex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(highcParser.Integer, 0); }
		public TypenameArrayContext(TypenameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterTypenameArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitTypenameArray(this);
		}
	}
	public partial class TypenameSingleContext : TypenameContext {
		public TypenameContext inner;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(highcParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(highcParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(highcParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypenameSingleContext(TypenameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterTypenameSingle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitTypenameSingle(this);
		}
	}
	public partial class TypenamePointerContext : TypenameContext {
		public TypenameContext @base;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(highcParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public TypenamePointerContext(TypenameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterTypenamePointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitTypenamePointer(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		return typename(0);
	}

	private TypenameContext typename(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypenameContext _localctx = new TypenameContext(Context, _parentState);
		TypenameContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_typename, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				_localctx = new TypenameSingleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 218;
				Match(Identifier);
				}
				break;
			case 2:
				{
				_localctx = new TypenameSingleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 219;
				Match(OpenParen);
				State = 220;
				((TypenameSingleContext)_localctx).inner = typename(0);
				State = 221;
				Match(CloseParen);
				}
				break;
			case 3:
				{
				_localctx = new TypenameManyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 223;
				((TypenameManyContext)_localctx)._Identifier = Match(Identifier);
				((TypenameManyContext)_localctx)._parts.Add(((TypenameManyContext)_localctx)._Identifier);
				State = 226;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 224;
						Match(T__0);
						State = 225;
						((TypenameManyContext)_localctx)._Identifier = Match(Identifier);
						((TypenameManyContext)_localctx)._parts.Add(((TypenameManyContext)_localctx)._Identifier);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 228;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 4:
				{
				_localctx = new TypenamePointerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 230;
				Match(Star);
				State = 231;
				((TypenamePointerContext)_localctx).@base = typename(3);
				}
				break;
			case 5:
				{
				_localctx = new TypenameArrayContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 232;
				Match(OpenIndex);
				State = 233;
				((TypenameArrayContext)_localctx).@base = typename(0);
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 234;
					Match(T__3);
					State = 235;
					((TypenameArrayContext)_localctx).count = Match(Integer);
					}
				}

				State = 238;
				Match(CloseIndex);
				}
				break;
			case 6:
				{
				_localctx = new TypenameFnContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 240;
				Match(Fn);
				State = 241;
				Match(OpenParen);
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76704130181103616L) != 0)) {
					{
					State = 242;
					((TypenameFnContext)_localctx)._typename_fn_args = typename_fn_args();
					((TypenameFnContext)_localctx)._args.Add(((TypenameFnContext)_localctx)._typename_fn_args);
					State = 247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__1) {
						{
						{
						State = 243;
						Match(T__1);
						State = 244;
						((TypenameFnContext)_localctx)._typename_fn_args = typename_fn_args();
						((TypenameFnContext)_localctx)._args.Add(((TypenameFnContext)_localctx)._typename_fn_args);
						}
						}
						State = 249;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 252;
				Match(CloseParen);
				State = 254;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 253;
					((TypenameFnContext)_localctx).ret = typename(0);
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypenameGenericContext(new TypenameContext(_parentctx, _parentState));
					((TypenameGenericContext)_localctx).base = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_typename);
					State = 258;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 259;
					Match(T__2);
					State = 261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 260;
						((TypenameGenericContext)_localctx)._typename = typename(0);
						((TypenameGenericContext)_localctx)._args.Add(((TypenameGenericContext)_localctx)._typename);
						}
						}
						State = 263;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 76704130181103616L) != 0) );
					State = 265;
					Match(T__2);
					}
					} 
				}
				State = 271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext op_expression() {
			return GetRuleContext<Op_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			op_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_expressionContext : ParserRuleContext {
		public Op_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_expression; } }
	 
		public Op_expressionContext() { }
		public virtual void CopyFrom(Op_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddExpressionContext : Op_expressionContext {
		public Op_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext[] op_expression() {
			return GetRuleContexts<Op_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext op_expression(int i) {
			return GetRuleContext<Op_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(highcParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(highcParser.Minus, 0); }
		public AddExpressionContext(Op_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
	}
	public partial class LogicExpressionContext : Op_expressionContext {
		public Op_expressionContext lhs;
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext[] op_expression() {
			return GetRuleContexts<Op_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext op_expression(int i) {
			return GetRuleContext<Op_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(highcParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(highcParser.Or, 0); }
		public LogicExpressionContext(Op_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterLogicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitLogicExpression(this);
		}
	}
	public partial class MemoryExpressionContext : Op_expressionContext {
		public Op_expressionContext op;
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext op_expression() {
			return GetRuleContext<Op_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(highcParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(highcParser.Ampersand, 0); }
		public MemoryExpressionContext(Op_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterMemoryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitMemoryExpression(this);
		}
	}
	public partial class UnaryExpressionContext : Op_expressionContext {
		public Op_expressionContext op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(highcParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(highcParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(highcParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext op_expression() {
			return GetRuleContext<Op_expressionContext>(0);
		}
		public UnaryExpressionContext(Op_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}
	public partial class CompareExpressionContext : Op_expressionContext {
		public Op_expressionContext lhs;
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext[] op_expression() {
			return GetRuleContexts<Op_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext op_expression(int i) {
			return GetRuleContext<Op_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CompEqual() { return GetToken(highcParser.CompEqual, 0); }
		public CompareExpressionContext(Op_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitCompareExpression(this);
		}
	}
	public partial class CallExpressionContext : Op_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		public CallExpressionContext(Op_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
	}
	public partial class MulExpressionContext : Op_expressionContext {
		public Op_expressionContext lhs;
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext[] op_expression() {
			return GetRuleContexts<Op_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext op_expression(int i) {
			return GetRuleContext<Op_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(highcParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(highcParser.Slash, 0); }
		public MulExpressionContext(Op_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterMulExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitMulExpression(this);
		}
	}
	public partial class BitwiseExpressionContext : Op_expressionContext {
		public Op_expressionContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext[] op_expression() {
			return GetRuleContexts<Op_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_expressionContext op_expression(int i) {
			return GetRuleContext<Op_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(highcParser.Ampersand, 0); }
		public BitwiseExpressionContext(Op_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterBitwiseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitBitwiseExpression(this);
		}
	}

	[RuleVersion(0)]
	public Op_expressionContext op_expression() {
		return op_expression(0);
	}

	private Op_expressionContext op_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Op_expressionContext _localctx = new Op_expressionContext(Context, _parentState);
		Op_expressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_op_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case Not:
			case Plus:
			case Minus:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 275;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 105621835751424L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 276;
				((UnaryExpressionContext)_localctx).op = op_expression(3);
				}
				break;
			case New:
			case True:
			case False:
			case Identifier:
			case Integer:
			case Float:
			case String:
			case OpenParen:
				{
				_localctx = new CallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 277;
				call_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 297;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new LogicExpressionContext(new Op_expressionContext(_parentctx, _parentState));
						((LogicExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_op_expression);
						State = 280;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 281;
						_la = TokenStream.LA(1);
						if ( !(_la==And || _la==Or) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 282;
						((LogicExpressionContext)_localctx).lhs = op_expression(9);
						}
						break;
					case 2:
						{
						_localctx = new CompareExpressionContext(new Op_expressionContext(_parentctx, _parentState));
						((CompareExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_op_expression);
						State = 283;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 284;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251799813686240L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 285;
						((CompareExpressionContext)_localctx).lhs = op_expression(8);
						}
						break;
					case 3:
						{
						_localctx = new MulExpressionContext(new Op_expressionContext(_parentctx, _parentState));
						((MulExpressionContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_op_expression);
						State = 286;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 287;
						_la = TokenStream.LA(1);
						if ( !(_la==Star || _la==Slash) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 288;
						((MulExpressionContext)_localctx).lhs = op_expression(7);
						}
						break;
					case 4:
						{
						_localctx = new BitwiseExpressionContext(new Op_expressionContext(_parentctx, _parentState));
						((BitwiseExpressionContext)_localctx).rhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_op_expression);
						State = 289;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 290;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 562949953428480L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 291;
						((BitwiseExpressionContext)_localctx).rhs = op_expression(6);
						}
						break;
					case 5:
						{
						_localctx = new AddExpressionContext(new Op_expressionContext(_parentctx, _parentState));
						((AddExpressionContext)_localctx).rhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_op_expression);
						State = 292;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 293;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 294;
						((AddExpressionContext)_localctx).rhs = op_expression(5);
						}
						break;
					case 6:
						{
						_localctx = new MemoryExpressionContext(new Op_expressionContext(_parentctx, _parentState));
						((MemoryExpressionContext)_localctx).op = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_op_expression);
						State = 295;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 296;
						_la = TokenStream.LA(1);
						if ( !(_la==Star || _la==Ampersand) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Explicit_template_instantiationContext : ParserRuleContext {
		public TypenameContext _typename;
		public IList<TypenameContext> _args = new List<TypenameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		public Explicit_template_instantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_template_instantiation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterExplicit_template_instantiation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitExplicit_template_instantiation(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_template_instantiationContext explicit_template_instantiation() {
		Explicit_template_instantiationContext _localctx = new Explicit_template_instantiationContext(Context, State);
		EnterRule(_localctx, 48, RULE_explicit_template_instantiation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(T__2);
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76704130181103616L) != 0)) {
				{
				{
				State = 303;
				_localctx._typename = typename(0);
				_localctx._args.Add(_localctx._typename);
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 309;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_expressionContext : ParserRuleContext {
		public Call_expressionContext target;
		public Explicit_template_instantiationContext inst;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _args = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Dot_expressionContext dot_expression() {
			return GetRuleContext<Dot_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(highcParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(highcParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_template_instantiationContext explicit_template_instantiation() {
			return GetRuleContext<Explicit_template_instantiationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterCall_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitCall_expression(this);
		}
	}

	[RuleVersion(0)]
	public Call_expressionContext call_expression() {
		return call_expression(0);
	}

	private Call_expressionContext call_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Call_expressionContext _localctx = new Call_expressionContext(Context, _parentState);
		Call_expressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_call_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 312;
			dot_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 332;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Call_expressionContext(_parentctx, _parentState);
					_localctx.target = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_call_expression);
					State = 314;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 316;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__2) {
						{
						State = 315;
						_localctx.inst = explicit_template_instantiation();
						}
					}

					State = 318;
					Match(OpenParen);
					State = 327;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4643031982546944L) != 0)) {
						{
						State = 319;
						_localctx._expression = expression();
						_localctx._args.Add(_localctx._expression);
						State = 324;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__1) {
							{
							{
							State = 320;
							Match(T__1);
							State = 321;
							_localctx._expression = expression();
							_localctx._args.Add(_localctx._expression);
							}
							}
							State = 326;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 329;
					Match(CloseParen);
					}
					} 
				}
				State = 334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Struct_expressionContext : ParserRuleContext {
		public Struct_expression_setContext _struct_expression_set;
		public IList<Struct_expression_setContext> _parts = new List<Struct_expression_setContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(highcParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(highcParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(highcParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_expression_setContext[] struct_expression_set() {
			return GetRuleContexts<Struct_expression_setContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_expression_setContext struct_expression_set(int i) {
			return GetRuleContext<Struct_expression_setContext>(i);
		}
		public Struct_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterStruct_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitStruct_expression(this);
		}
	}

	[RuleVersion(0)]
	public Struct_expressionContext struct_expression() {
		Struct_expressionContext _localctx = new Struct_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_struct_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			Match(New);
			State = 336;
			typename(0);
			State = 337;
			Match(OpenBrace);
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 338;
				_localctx._struct_expression_set = struct_expression_set();
				_localctx._parts.Add(_localctx._struct_expression_set);
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Let );
			State = 343;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_expression_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(highcParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(highcParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(highcParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Struct_expression_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_expression_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterStruct_expression_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitStruct_expression_set(this);
		}
	}

	[RuleVersion(0)]
	public Struct_expression_setContext struct_expression_set() {
		Struct_expression_setContext _localctx = new Struct_expression_setContext(Context, State);
		EnterRule(_localctx, 54, RULE_struct_expression_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(Let);
			State = 346;
			Match(Identifier);
			State = 347;
			Match(Equal);
			State = 348;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dot_expressionContext : ParserRuleContext {
		public IToken field;
		[System.Diagnostics.DebuggerNonUserCode] public Term_expressionContext term_expression() {
			return GetRuleContext<Term_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dot_expressionContext dot_expression() {
			return GetRuleContext<Dot_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(highcParser.Identifier, 0); }
		public Dot_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dot_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterDot_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitDot_expression(this);
		}
	}

	[RuleVersion(0)]
	public Dot_expressionContext dot_expression() {
		return dot_expression(0);
	}

	private Dot_expressionContext dot_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Dot_expressionContext _localctx = new Dot_expressionContext(Context, _parentState);
		Dot_expressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_dot_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 351;
			term_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 358;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Dot_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_dot_expression);
					State = 353;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 354;
					Match(T__0);
					State = 355;
					_localctx.field = Match(Identifier);
					}
					} 
				}
				State = 360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Term_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(highcParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(highcParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(highcParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_expressionContext struct_expression() {
			return GetRuleContext<Struct_expressionContext>(0);
		}
		public Term_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterTerm_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitTerm_expression(this);
		}
	}

	[RuleVersion(0)]
	public Term_expressionContext term_expression() {
		Term_expressionContext _localctx = new Term_expressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_term_expression);
		try {
			State = 368;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case True:
			case False:
			case Integer:
			case Float:
			case String:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361;
				literal();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362;
				Match(Identifier);
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 363;
				Match(OpenParen);
				State = 364;
				expression();
				State = 365;
				Match(CloseParen);
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 4);
				{
				State = 367;
				struct_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(highcParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(highcParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(highcParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 60, RULE_literal);
		try {
			State = 374;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 370;
				Match(Integer);
				}
				break;
			case Float:
				EnterOuterAlt(_localctx, 2);
				{
				State = 371;
				Match(Float);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 3);
				{
				State = 372;
				Match(String);
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 4);
				{
				State = 373;
				boolean_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(highcParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(highcParser.False, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IhighcListener typedListener = listener as IhighcListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 62, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return typename_sempred((TypenameContext)_localctx, predIndex);
		case 23: return op_expression_sempred((Op_expressionContext)_localctx, predIndex);
		case 25: return call_expression_sempred((Call_expressionContext)_localctx, predIndex);
		case 28: return dot_expression_sempred((Dot_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool typename_sempred(TypenameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		}
		return true;
	}
	private bool op_expression_sempred(Op_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 2);
		}
		return true;
	}
	private bool call_expression_sempred(Call_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 2);
		}
		return true;
	}
	private bool dot_expression_sempred(Dot_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,57,379,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,77,8,1,1,2,1,2,1,2,1,2,5,2,83,8,2,10,2,12,2,86,9,2,
		1,3,1,3,1,3,1,3,5,3,92,8,3,10,3,12,3,95,9,3,1,4,1,4,4,4,99,8,4,11,4,12,
		4,100,1,5,1,5,1,5,1,5,1,6,3,6,108,8,6,1,6,1,6,1,6,1,6,5,6,114,8,6,10,6,
		12,6,117,9,6,1,6,1,6,1,7,3,7,122,8,7,1,7,1,7,1,7,1,8,3,8,128,8,8,1,8,1,
		8,1,8,1,8,1,8,1,8,5,8,136,8,8,10,8,12,8,139,9,8,3,8,141,8,8,1,8,1,8,3,
		8,145,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,5,10,156,8,10,10,10,12,
		10,159,9,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		3,11,173,8,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,185,
		8,14,1,15,1,15,1,15,1,15,3,15,191,8,15,1,16,1,16,1,16,1,16,1,17,1,17,1,
		17,1,17,1,18,1,18,3,18,203,8,18,1,19,1,19,1,19,3,19,208,8,19,1,19,1,19,
		1,19,1,20,3,20,214,8,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,4,21,227,8,21,11,21,12,21,228,1,21,1,21,1,21,1,21,1,21,1,21,3,
		21,237,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,246,8,21,10,21,12,
		21,249,9,21,3,21,251,8,21,1,21,1,21,3,21,255,8,21,3,21,257,8,21,1,21,1,
		21,1,21,4,21,262,8,21,11,21,12,21,263,1,21,1,21,5,21,268,8,21,10,21,12,
		21,271,9,21,1,22,1,22,1,23,1,23,1,23,1,23,3,23,279,8,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		5,23,298,8,23,10,23,12,23,301,9,23,1,24,1,24,5,24,305,8,24,10,24,12,24,
		308,9,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,317,8,25,1,25,1,25,1,
		25,1,25,5,25,323,8,25,10,25,12,25,326,9,25,3,25,328,8,25,1,25,5,25,331,
		8,25,10,25,12,25,334,9,25,1,26,1,26,1,26,1,26,4,26,340,8,26,11,26,12,26,
		341,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,5,
		28,357,8,28,10,28,12,28,360,9,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,
		29,369,8,29,1,30,1,30,1,30,1,30,3,30,375,8,30,1,31,1,31,1,31,0,4,42,46,
		50,56,32,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,0,9,1,0,17,18,3,0,13,13,36,36,45,46,2,0,
		35,35,37,37,2,0,5,9,51,51,1,0,47,48,2,0,10,12,49,49,1,0,45,46,2,0,47,47,
		49,49,1,0,38,39,409,0,67,1,0,0,0,2,76,1,0,0,0,4,78,1,0,0,0,6,87,1,0,0,
		0,8,96,1,0,0,0,10,102,1,0,0,0,12,107,1,0,0,0,14,121,1,0,0,0,16,127,1,0,
		0,0,18,148,1,0,0,0,20,153,1,0,0,0,22,172,1,0,0,0,24,174,1,0,0,0,26,177,
		1,0,0,0,28,180,1,0,0,0,30,190,1,0,0,0,32,192,1,0,0,0,34,196,1,0,0,0,36,
		202,1,0,0,0,38,204,1,0,0,0,40,213,1,0,0,0,42,256,1,0,0,0,44,272,1,0,0,
		0,46,278,1,0,0,0,48,302,1,0,0,0,50,311,1,0,0,0,52,335,1,0,0,0,54,345,1,
		0,0,0,56,350,1,0,0,0,58,368,1,0,0,0,60,374,1,0,0,0,62,376,1,0,0,0,64,66,
		3,2,1,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,1,1,
		0,0,0,69,67,1,0,0,0,70,77,3,16,8,0,71,77,3,12,6,0,72,77,3,18,9,0,73,77,
		3,38,19,0,74,77,3,4,2,0,75,77,3,6,3,0,76,70,1,0,0,0,76,71,1,0,0,0,76,72,
		1,0,0,0,76,73,1,0,0,0,76,74,1,0,0,0,76,75,1,0,0,0,77,3,1,0,0,0,78,79,5,
		32,0,0,79,84,5,41,0,0,80,81,5,1,0,0,81,83,5,41,0,0,82,80,1,0,0,0,83,86,
		1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,5,1,0,0,0,86,84,1,0,0,0,87,88,5,
		33,0,0,88,93,5,41,0,0,89,90,5,1,0,0,90,92,5,41,0,0,91,89,1,0,0,0,92,95,
		1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,7,1,0,0,0,95,93,1,0,0,0,96,98,5,
		28,0,0,97,99,5,41,0,0,98,97,1,0,0,0,99,100,1,0,0,0,100,98,1,0,0,0,100,
		101,1,0,0,0,101,9,1,0,0,0,102,103,5,18,0,0,103,104,5,41,0,0,104,105,3,
		42,21,0,105,11,1,0,0,0,106,108,3,8,4,0,107,106,1,0,0,0,107,108,1,0,0,0,
		108,109,1,0,0,0,109,110,5,27,0,0,110,111,5,41,0,0,111,115,5,54,0,0,112,
		114,3,10,5,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,
		0,0,0,116,118,1,0,0,0,117,115,1,0,0,0,118,119,5,55,0,0,119,13,1,0,0,0,
		120,122,5,34,0,0,121,120,1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,124,
		5,41,0,0,124,125,3,42,21,0,125,15,1,0,0,0,126,128,3,8,4,0,127,126,1,0,
		0,0,127,128,1,0,0,0,128,129,1,0,0,0,129,130,5,22,0,0,130,131,5,41,0,0,
		131,140,5,52,0,0,132,137,3,14,7,0,133,134,5,2,0,0,134,136,3,14,7,0,135,
		133,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,141,1,
		0,0,0,139,137,1,0,0,0,140,132,1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,
		142,144,5,53,0,0,143,145,3,42,21,0,144,143,1,0,0,0,144,145,1,0,0,0,145,
		146,1,0,0,0,146,147,3,20,10,0,147,17,1,0,0,0,148,149,5,26,0,0,149,150,
		5,41,0,0,150,151,5,50,0,0,151,152,3,42,21,0,152,19,1,0,0,0,153,157,5,54,
		0,0,154,156,3,22,11,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,
		157,158,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,5,55,0,0,161,21,
		1,0,0,0,162,173,3,34,17,0,163,173,3,38,19,0,164,173,3,28,14,0,165,173,
		3,32,16,0,166,173,3,26,13,0,167,173,3,24,12,0,168,173,5,23,0,0,169,173,
		5,24,0,0,170,173,3,20,10,0,171,173,3,44,22,0,172,162,1,0,0,0,172,163,1,
		0,0,0,172,164,1,0,0,0,172,165,1,0,0,0,172,166,1,0,0,0,172,167,1,0,0,0,
		172,168,1,0,0,0,172,169,1,0,0,0,172,170,1,0,0,0,172,171,1,0,0,0,173,23,
		1,0,0,0,174,175,5,30,0,0,175,176,3,44,22,0,176,25,1,0,0,0,177,178,5,25,
		0,0,178,179,3,20,10,0,179,27,1,0,0,0,180,181,5,19,0,0,181,182,3,44,22,
		0,182,184,3,20,10,0,183,185,3,30,15,0,184,183,1,0,0,0,184,185,1,0,0,0,
		185,29,1,0,0,0,186,187,5,20,0,0,187,191,3,20,10,0,188,189,5,20,0,0,189,
		191,3,28,14,0,190,186,1,0,0,0,190,188,1,0,0,0,191,31,1,0,0,0,192,193,5,
		21,0,0,193,194,3,44,22,0,194,195,3,20,10,0,195,33,1,0,0,0,196,197,3,44,
		22,0,197,198,5,50,0,0,198,199,3,44,22,0,199,35,1,0,0,0,200,203,5,40,0,
		0,201,203,3,44,22,0,202,200,1,0,0,0,202,201,1,0,0,0,203,37,1,0,0,0,204,
		205,7,0,0,0,205,207,5,41,0,0,206,208,3,42,21,0,207,206,1,0,0,0,207,208,
		1,0,0,0,208,209,1,0,0,0,209,210,5,50,0,0,210,211,3,36,18,0,211,39,1,0,
		0,0,212,214,5,41,0,0,213,212,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,
		216,3,42,21,0,216,41,1,0,0,0,217,218,6,21,-1,0,218,257,5,41,0,0,219,220,
		5,52,0,0,220,221,3,42,21,0,221,222,5,53,0,0,222,257,1,0,0,0,223,226,5,
		41,0,0,224,225,5,1,0,0,225,227,5,41,0,0,226,224,1,0,0,0,227,228,1,0,0,
		0,228,226,1,0,0,0,228,229,1,0,0,0,229,257,1,0,0,0,230,231,5,47,0,0,231,
		257,3,42,21,3,232,233,5,56,0,0,233,236,3,42,21,0,234,235,5,4,0,0,235,237,
		5,42,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,238,1,0,0,0,238,239,5,57,
		0,0,239,257,1,0,0,0,240,241,5,22,0,0,241,250,5,52,0,0,242,247,3,40,20,
		0,243,244,5,2,0,0,244,246,3,40,20,0,245,243,1,0,0,0,246,249,1,0,0,0,247,
		245,1,0,0,0,247,248,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,250,242,1,
		0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,254,5,53,0,0,253,255,3,42,21,
		0,254,253,1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,217,1,0,0,0,256,
		219,1,0,0,0,256,223,1,0,0,0,256,230,1,0,0,0,256,232,1,0,0,0,256,240,1,
		0,0,0,257,269,1,0,0,0,258,259,10,4,0,0,259,261,5,3,0,0,260,262,3,42,21,
		0,261,260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,
		265,1,0,0,0,265,266,5,3,0,0,266,268,1,0,0,0,267,258,1,0,0,0,268,271,1,
		0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,43,1,0,0,0,271,269,1,0,0,0,272,
		273,3,46,23,0,273,45,1,0,0,0,274,275,6,23,-1,0,275,276,7,1,0,0,276,279,
		3,46,23,3,277,279,3,50,25,0,278,274,1,0,0,0,278,277,1,0,0,0,279,299,1,
		0,0,0,280,281,10,8,0,0,281,282,7,2,0,0,282,298,3,46,23,9,283,284,10,7,
		0,0,284,285,7,3,0,0,285,298,3,46,23,8,286,287,10,6,0,0,287,288,7,4,0,0,
		288,298,3,46,23,7,289,290,10,5,0,0,290,291,7,5,0,0,291,298,3,46,23,6,292,
		293,10,4,0,0,293,294,7,6,0,0,294,298,3,46,23,5,295,296,10,2,0,0,296,298,
		7,7,0,0,297,280,1,0,0,0,297,283,1,0,0,0,297,286,1,0,0,0,297,289,1,0,0,
		0,297,292,1,0,0,0,297,295,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,
		300,1,0,0,0,300,47,1,0,0,0,301,299,1,0,0,0,302,306,5,3,0,0,303,305,3,42,
		21,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,
		309,1,0,0,0,308,306,1,0,0,0,309,310,5,3,0,0,310,49,1,0,0,0,311,312,6,25,
		-1,0,312,313,3,56,28,0,313,332,1,0,0,0,314,316,10,2,0,0,315,317,3,48,24,
		0,316,315,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,327,5,52,0,0,319,
		324,3,44,22,0,320,321,5,2,0,0,321,323,3,44,22,0,322,320,1,0,0,0,323,326,
		1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,
		0,327,319,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,331,5,53,0,0,330,
		314,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,51,1,0,
		0,0,334,332,1,0,0,0,335,336,5,29,0,0,336,337,3,42,21,0,337,339,5,54,0,
		0,338,340,3,54,27,0,339,338,1,0,0,0,340,341,1,0,0,0,341,339,1,0,0,0,341,
		342,1,0,0,0,342,343,1,0,0,0,343,344,5,55,0,0,344,53,1,0,0,0,345,346,5,
		18,0,0,346,347,5,41,0,0,347,348,5,50,0,0,348,349,3,44,22,0,349,55,1,0,
		0,0,350,351,6,28,-1,0,351,352,3,58,29,0,352,358,1,0,0,0,353,354,10,2,0,
		0,354,355,5,1,0,0,355,357,5,41,0,0,356,353,1,0,0,0,357,360,1,0,0,0,358,
		356,1,0,0,0,358,359,1,0,0,0,359,57,1,0,0,0,360,358,1,0,0,0,361,369,3,60,
		30,0,362,369,5,41,0,0,363,364,5,52,0,0,364,365,3,44,22,0,365,366,5,53,
		0,0,366,369,1,0,0,0,367,369,3,52,26,0,368,361,1,0,0,0,368,362,1,0,0,0,
		368,363,1,0,0,0,368,367,1,0,0,0,369,59,1,0,0,0,370,375,5,42,0,0,371,375,
		5,43,0,0,372,375,5,44,0,0,373,375,3,62,31,0,374,370,1,0,0,0,374,371,1,
		0,0,0,374,372,1,0,0,0,374,373,1,0,0,0,375,61,1,0,0,0,376,377,7,8,0,0,377,
		63,1,0,0,0,39,67,76,84,93,100,107,115,121,127,137,140,144,157,172,184,
		190,202,207,213,228,236,247,250,254,256,263,269,278,297,299,306,316,324,
		327,332,341,358,368,374
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
